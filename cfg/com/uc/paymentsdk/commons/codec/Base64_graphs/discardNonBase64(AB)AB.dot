digraph "CFG forcom.uc.paymentsdk.commons.codec.Base64.discardNonBase64([B)[B" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lbyte[] r0 = new byte[r7.length]lr2 = 0lr4 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|LOOP_START\lPHI: r2 r4l  0x0006: PHI (r2v1 'i' int A[IMMUTABLE_TYPE]) = (r2v0 'i' int), (r2v2 'i' int) binds: [B:1:0x0000, B:8:0x0017] A[DONT_GENERATE, DONT_INLINE]l  0x0006: PHI (r4v1 'j' int) = (r4v0 'j' int), (r4v2 'j' int) binds: [B:1:0x0000, B:8:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0006\-\>B:8:0x0017\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|lif (r4 \< r7.length) goto L21l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|lif (isBase64(r7[r4]) != false) goto L24l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|lr0[r2] = r7[r4]lr2 = r2 + 1l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|SYNTHETIC\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|LOOP_END\lPHI: r2l  0x0017: PHI (r2v2 'i' int) = (r2v1 'i' int), (r2v3 'i' int) binds: [B:9:0x0017, B:7:0x0017] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0006\-\>B:8:0x0017\l|lint r4 = r4 + 1l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|SYNTHETIC\l|l}"];
Node_10 [shape=record,label="{10\:\ 0x0009|SYNTHETIC\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|lbyte[] r1 = new byte[r2]ljava.lang.System.arraycopy(r0, 0, r1, 0, r2)l}"];
Node_12 [shape=record,label="{12\:\ 0x000e|RETURN\l|lreturn r1l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{static byte[] com.uc.paymentsdk.commons.codec.Base64.discardNonBase64((r7v0 'paramArrayOfByte' byte[] A[D('paramArrayOfByte' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lBACK_EDGE: B:8:0x0017 \-\> B:2:0x0006, CROSS_EDGE: B:6:0x001a \-\> B:8:0x0017\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_2;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

