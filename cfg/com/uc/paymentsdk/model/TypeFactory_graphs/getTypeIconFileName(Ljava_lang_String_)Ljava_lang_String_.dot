digraph "CFG forcom.uc.paymentsdk.model.TypeFactory.getTypeIconFileName(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lboolean r0 = com.uc.paymentsdk.util.Utils.isHdpi()l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|lif (com.uc.paymentsdk.model.TypeFactory.TYPE_PAY_UPOINT.equals(r3) == false) goto L26l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|lif (r0 == false) goto L25l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\lORIG_RETURN\l|lreturn \"upoint_logo_hdpi.png\"l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|SYNTHETIC\lRETURN\l|lreturn \"upoint_logo.png\"l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|lif (\"sms\".equals(r3) == false) goto L31l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|lif (r0 == false) goto L30l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|SYNTHETIC\lRETURN\l|lreturn com.uc.paymentsdk.util.Constants.RES_TYPE_SMS_ICON_HDPIl}"];
Node_11 [shape=record,label="{11\:\ 0x0021|SYNTHETIC\lRETURN\l|lreturn com.uc.paymentsdk.util.Constants.RES_TYPE_SMS_ICONl}"];
Node_12 [shape=record,label="{12\:\ 0x0024|l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|lthrow new java.lang.IllegalArgumentException(com.uc.paymentsdk.util.Constants.ERROR_TYPE_NOT_SUPPORTED)l}"];
MethodNode[shape=record,label="{private static java.lang.String com.uc.paymentsdk.model.TypeFactory.getTypeIconFileName((r3v0 'paramString' java.lang.String A[D('paramString' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:6:0x0011 \-\> B:5:0x0010, CROSS_EDGE: B:10:0x001e \-\> B:5:0x0010, CROSS_EDGE: B:11:0x0021 \-\> B:5:0x0010, CROSS_EDGE: B:13:0x002b \-\> B:5:?\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_6 -> Node_5;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_5;
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_13 -> Node_5;
}

