digraph "CFG forcom.uc.paymentsdk.util.Utils.createARanConsumeID(I)Ljava\/lang\/String;" {
subgraph cluster_Region_1520000502 {
label = "R(4:1|(1:4)|(1:8)|9)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|ljava.lang.String java.lang.String r0 = \"\"l}"];
subgraph cluster_LoopRegion_890445771 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|ADDED_TO_REGION\l|lif (r0.length() \< r4) goto L20l}"];
subgraph cluster_Region_933022840 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0013|LOOP_END\lLOOP:0: B:2:0x0002\-\>B:4:0x0013\l|ljava.lang.String r0 = java.lang.String.valueOf(r0) + getRan(10L)l}"];
}
}
subgraph cluster_IfRegion_1582306424 {
label = "IF [B:7:0x000c] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x000c|lif (r0.length() \> r4) goto L18l}"];
subgraph cluster_Region_1320584361 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x000e|lr0.substring(0, r4)l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x0012|RETURN\l|lreturn r0l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0002|LOOP_START\lPHI: r0l  0x0002: PHI (r0v1 'rdmstr' java.lang.String) = (r0v0 'rdmstr' java.lang.String), (r0v2 'rdmstr' java.lang.String) binds: [B:1:0x0000, B:4:0x0013] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0002\-\>B:4:0x0013\l|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0008|SYNTHETIC\l|l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0008|l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{public static java.lang.String com.uc.paymentsdk.util.Utils.createARanConsumeID((r4v0 'number' int A[D('number' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:7:0x000c \-\> B:9:0x0012, BACK_EDGE: B:4:0x0013 \-\> B:2:0x0002\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_2;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_6 -> Node_7;
}

