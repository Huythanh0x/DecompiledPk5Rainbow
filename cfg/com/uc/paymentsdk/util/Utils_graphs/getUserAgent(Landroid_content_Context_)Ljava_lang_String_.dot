digraph "CFG forcom.uc.paymentsdk.util.Utils.getUserAgent(Landroid\/content\/Context;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|ljava.lang.String r1 = \"\"landroid.content.pm.PackageManager r0 = r4.getPackageManager()l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|SYNTHETIC\lEXC_TOP_SPLITTER\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NameNotFoundException \-\> 0x003c, blocks: (B:3:0x0006), top: B:2:0x0006 \}\lCatch: NameNotFoundException \-\> 0x003c\l|ljava.lang.String r1 = r0.getApplicationLabel(r0.getApplicationInfo(r4.getPackageName(), 128)).toString()     \/\/ Catch: android.content.pm.PackageManager.NameNotFoundException \-\> L3cl}"];
Node_4 [shape=record,label="{4\:\ 0x0018|PHI: r1l  0x0018: PHI (r1v2 'str' java.lang.String) = (r1v0 'str' java.lang.String), (r1v3 'str' java.lang.String) binds: [B:8:0x003c, B:3:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_5 [shape=record,label="{5\:\ 0x003b|RETURN\l|lreturn new java.lang.StringBuilder(\"packageName=\").append(r4.getPackageName()).append(\",appName=\").append(r1).append(\",channelID=1\").toString()l}"];
Node_6 [shape=record,label="{6\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|ExcHandler: NameNotFoundException \-\> 0x003c\l|l}"];
MethodNode[shape=record,label="{public static java.lang.String com.uc.paymentsdk.util.Utils.getUserAgent((r4v0 'paramContext' android.content.Context A[D('paramContext' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lTryCatch #0 \{NameNotFoundException \-\> 0x003c, blocks: (B:3:0x0006), top: B:2:0x0006 \}\lCROSS_EDGE: B:8:0x003c \-\> B:4:0x0018, CROSS_EDGE: B:2:0x0006 \-\> B:8:0x003c\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_8;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_4;
}

