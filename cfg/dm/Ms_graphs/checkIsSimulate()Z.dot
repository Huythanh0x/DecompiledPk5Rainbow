digraph "CFG fordm.Ms.checkIsSimulate()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x000f|lif ((java.lang.Runtime.getRuntime().totalMemory() \> 8000000 ? 1 : (java.lang.Runtime.getRuntime().totalMemory() == 8000000 ? 0 : \-1)) \< 0) goto L39l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|RETURN\lORIG_RETURN\l|lreturn truel}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|SYNTHETIC\lEXC_TOP_SPLITTER\l|l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x001f, blocks: (B:7:0x0013), top: B:6:0x0013 \}\lCatch: Exception \-\> 0x001f\l|ljava.lang.Class.forName(\"emulator.Emulator\")     \/\/ Catch: java.lang.Exception \-\> L1fljava.lang.Class.forName(\"com.sprintpcs.util.System\")     \/\/ Catch: java.lang.Exception \-\> L1fl}"];
Node_8 [shape=record,label="{8\:\ 0x001d|l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|lreturn truel}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|ExcHandler: Exception \-\> 0x001f\l|l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|ljava.lang.String r0 = java.lang.System.getProperty(\"microedition.platform\")l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|lif (r0.toLowerCase().indexOf(\"wtk\") != (\-1)) goto L38l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|lif (r0.toLowerCase().indexOf(\"javasdk\") != (\-1)) goto L38l}"];
Node_16 [shape=record,label="{16\:\ 0x003e|l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|lif (r0.toLowerCase().indexOf(\"j2me\") != (\-1)) goto L38l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|SYNTHETIC\lRETURN\l|lreturn falsel}"];
Node_19 [shape=record,label="{19\:\ 0x004c|l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|lreturn truel}"];
MethodNode[shape=record,label="{private boolean dm.Ms.checkIsSimulate((r7v0 'this' dm.Ms A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lTryCatch #0 \{Exception \-\> 0x001f, blocks: (B:7:0x0013), top: B:6:0x0013 \}\lCROSS_EDGE: B:8:0x001d \-\> B:4:0x0012, CROSS_EDGE: B:18:0x004a \-\> B:4:0x0012, CROSS_EDGE: B:19:0x004c \-\> B:4:0x0012, CROSS_EDGE: B:15:0x003c \-\> B:19:0x004c, CROSS_EDGE: B:13:0x0030 \-\> B:19:0x004c, CROSS_EDGE: B:6:0x0013 \-\> B:11:0x001f\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_5;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_5;
Node_19 -> Node_20;
Node_20 -> Node_5;
}

