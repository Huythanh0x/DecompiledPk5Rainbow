digraph "CFG fordm.Ms.createImage(Ljavax\/microedition\/lcdui\/Image;IIIII)Ljavax\/microedition\/lcdui\/Image;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|lif ((r8 + r10) \<= r7.getWidth()) goto L15l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|lint r10 = r7.getWidth() \- r8l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|PHI: r10l  0x000e: PHI (r10v1 'width' int) = (r10v0 'width' int), (r10v2 'width' int) binds: [B:2:0x0006, B:3:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|lif ((r9 + r11) \<= r7.getHeight()) goto L18l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|lint r11 = r7.getHeight() \- r9l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|PHI: r11l  0x001c: PHI (r11v1 'height' int) = (r11v0 'height' int), (r11v2 'height' int) binds: [B:5:0x0014, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|lr3 = r10lr4 = r11l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|RETURN\l|lreturn javax.microedition.lcdui.Image.createImage(r7, r8, r9, r3, r4, r6.transA[r12])l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{javax.microedition.lcdui.Image dm.Ms.createImage((r6v0 'this' dm.Ms A[IMMUTABLE_TYPE, THIS]), (r7v0 'image' javax.microedition.lcdui.Image A[D('image' javax.microedition.lcdui.Image), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'width' int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'height' int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'trans' int A[D('trans' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:5:0x0014 \-\> B:7:0x001c, CROSS_EDGE: B:2:0x0006 \-\> B:4:0x000e\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
}

