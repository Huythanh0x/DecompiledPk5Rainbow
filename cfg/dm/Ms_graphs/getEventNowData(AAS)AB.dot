digraph "CFG fordm.Ms.getEventNowData([[S)[B" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|ljava.io.ByteArrayOutputStream r0 = new java.io.ByteArrayOutputStream()lr0.write(r5.length)lr1 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|LOOP_START\lPHI: r1l  0x000a: PHI (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:1:0x0000, B:8:0x001a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x000a\-\>B:8:0x001a\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|lif (r1 \< r5.length) goto L25l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|lif (r5[r1] != null) goto L29l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|lr0.write(0)l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|SYNTHETIC\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|LOOP_END\lLOOP:0: B:2:0x000a\-\>B:8:0x001a\l|lint r1 = r1 + 1l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|lr0.write(r5[r1].length)lr2 = 0l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|LOOP_START\lPHI: r2l  0x0024: PHI (r2v1 'j' int) = (r2v0 'j' int), (r2v2 'j' int) binds: [B:9:0x001d, B:12:0x0029] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:10:0x0024\-\>B:12:0x0029\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|lif (r2 \>= r5[r1].length) goto L35l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|LOOP_END\lLOOP:1: B:10:0x0024\-\>B:12:0x0029\l|lr0.write(r5[r1][r2] & 255)lr0.write((r5[r1][r2] \>\> 8) & 255)lint r2 = r2 + 1l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|SYNTHETIC\l|l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|SYNTHETIC\l|l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|RETURN\l|lreturn r0.toByteArray()l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{public byte[] dm.Ms.getEventNowData((r4v0 'this' dm.Ms A[IMMUTABLE_TYPE, THIS]), (r5v0 'event_now' short[][] A[D('event_now' short[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:8:0x001a \-\> B:2:0x000a, CROSS_EDGE: B:11:0x0027 \-\> B:8:0x001a, BACK_EDGE: B:12:0x0029 \-\> B:10:0x0024\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_14[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_2;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_10;
Node_13 -> Node_8;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

