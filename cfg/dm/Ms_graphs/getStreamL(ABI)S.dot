digraph "CFG fordm.Ms.getStreamL([BI)S" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lif (r5 != 0) goto L20l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|lint r0 = dm.Ms.skipldm.Ms.skip = r0 + 1l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\lORIG_RETURN\l|lreturn r4[r0]l}"];
Node_4 [shape=record,label="{4\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|lif (r5 != 1) goto L23l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|lint r0 = dm.Ms.skipldm.Ms.skip = r0 + 1l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|lreturn (short) (r4[r0] + 100)l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|lif (r5 != 2) goto L26l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|lint r0 = dm.Ms.skipldm.Ms.skip = r0 + 1lint r0 = (r4[r0] & 255) \<\< 8lint r1 = dm.Ms.skipldm.Ms.skip = r1 + 1l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|lreturn (short) (r0 \| (r4[r1] & 255))l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|lint r0 = dm.Ms.skipldm.Ms.skip = r0 + 1lr0 = r4[r0] & 255lint r1 = dm.Ms.skipldm.Ms.skip = r1 + 1l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|lreturn (short) (r0 \| ((r4[r1] & 255) \<\< 8))l}"];
MethodNode[shape=record,label="{private short dm.Ms.getStreamL((r3v0 'this' dm.Ms A[IMMUTABLE_TYPE, THIS]), (r4v0 'data' byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'mode' int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:7:0x000e \-\> B:3:0x000a, CROSS_EDGE: B:11:0x001d \-\> B:3:0x000a, CROSS_EDGE: B:13:0x0036 \-\> B:3:0x000a\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2[style=dashed];
Node_1 -> Node_5;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_4;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_4;
Node_13 -> Node_14;
Node_14 -> Node_4;
}

