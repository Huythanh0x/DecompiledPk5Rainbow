digraph "CFG fordm.Ms.isRect(IIIIIIII)Z" {
subgraph cluster_Region_1360778491 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0002|RETURN\l|lreturn r2 \< r6 + r8 && r2 + r4 \> r6 && r3 \< r7 + r9 && r3 + r5 \> r7l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0000|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004|l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0006|REMOVE\lADDED_TO_REGION\l|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0008|l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000a|REMOVE\lADDED_TO_REGION\l|l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000c|l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000e|REMOVE\lADDED_TO_REGION\l|l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0010|ORIG_RETURN\l|l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0012|SYNTHETIC\l|l}"];
MethodNode[shape=record,label="{public boolean dm.Ms.isRect((r1v0 'this' dm.Ms A[IMMUTABLE_TYPE, THIS]), (r2v0 'a0' int A[D('a0' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'a1' int A[D('a1' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'aw' int A[D('aw' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'ah' int A[D('ah' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'b0' int A[D('b0' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'b1' int A[D('b1' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'bw' int A[D('bw' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'bh' int A[D('bh' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:11:0x0012 \-\> B:10:0x0011, CROSS_EDGE: B:6:0x000a \-\> B:11:0x0012, CROSS_EDGE: B:4:0x0006 \-\> B:11:0x0012, CROSS_EDGE: B:2:0x0002 \-\> B:11:0x0012\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_2 -> Node_11;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_11 -> Node_10;
}

