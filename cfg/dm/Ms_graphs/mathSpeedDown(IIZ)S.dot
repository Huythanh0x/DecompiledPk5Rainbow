digraph "CFG fordm.Ms.mathSpeedDown(IIZ)S" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x0002|lif ((r2 \/ r3) == 0) goto L21l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|lint r2 = r2 \- (r2 \/ r3)l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|PHI: r2l  0x0007: PHI (r2v4 'volue' int) = (r2v1 'volue' int), (r2v2 'volue' int), (r2v3 'volue' int), (r2v5 'volue' int) binds: [B:13:0x0017, B:12:0x0014, B:9:0x000d, B:3:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|RETURN\l|lreturn (short) r2l}"];
Node_6 [shape=record,label="{6\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|lif (r4 == false) goto L24l}"];
Node_8 [shape=record,label="{8\:\ 0x000b|lif (r2 \<= 0) goto L24l}"];
Node_9 [shape=record,label="{9\:\ 0x000d|lint r2 = r2 + (\-1)l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|lif (r4 == false) goto L27l}"];
Node_11 [shape=record,label="{11\:\ 0x0012|lif (r2 \>= 0) goto L27l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|lint r2 = r2 + 1l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|lr2 = 0l}"];
MethodNode[shape=record,label="{public short dm.Ms.mathSpeedDown((r1v0 'this' dm.Ms A[IMMUTABLE_TYPE, THIS]), (r2v0 'volue' int A[D('volue' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'num' int A[D('num' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'bb' boolean A[D('bb' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:9:0x000d \-\> B:4:0x0007, CROSS_EDGE: B:12:0x0014 \-\> B:4:0x0007, CROSS_EDGE: B:13:0x0017 \-\> B:4:0x0007, CROSS_EDGE: B:10:0x0010 \-\> B:13:0x0017, CROSS_EDGE: B:7:0x0009 \-\> B:10:0x0010\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_4;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_4;
Node_13 -> Node_4;
}

