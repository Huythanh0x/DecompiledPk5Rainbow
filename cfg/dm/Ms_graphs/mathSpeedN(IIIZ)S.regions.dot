digraph "CFG fordm.Ms.mathSpeedN(IIIZ)S" {
subgraph cluster_Region_606259072 {
label = "R(2:(1:4)(1:(1:11)(1:(1:15)(1:14)))|6) | DECL_VAR: int volue\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1068983789 {
label = "IF [B:1:0x0000, B:3:0x0004] THEN: R(1:4) ELSE: R(1:(1:11)(1:(1:15)(1:14)))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lif (r2 \> r3) goto L22l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|ADDED_TO_REGION\l|lif ((r2 \- r4) \> r3) goto L24l}"];
subgraph cluster_Region_1573999190 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|lint r2 = r2 \- r4l}"];
}
subgraph cluster_Region_2042468742 {
label = "R(1:(1:11)(1:(1:15)(1:14))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_553629683 {
label = "IF [B:8:0x0009, B:10:0x000d] THEN: R(1:11) ELSE: R(1:(1:15)(1:14)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0009|lif (r2 \< r3) goto L28l}"];
Node_10 [shape=record,label="{10\:\ 0x000d|ADDED_TO_REGION\l|lif ((r2 + r4) \< r3) goto L30l}"];
subgraph cluster_Region_1479946344 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000f|lint r2 = r2 + r4l}"];
}
subgraph cluster_Region_315849387 {
label = "R(1:(1:15)(1:14)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_382729489 {
label = "IF [B:12:0x0011, B:13:0x0013] THEN: R(1:15) ELSE: R(1:14) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0011|lif (r5 == true) goto L32l}"];
Node_13 [shape=record,label="{13\:\ 0x0013|ADDED_TO_REGION\l|lif (r2 \<= r3) goto L34l}"];
subgraph cluster_Region_1433255216 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0018|lr2 = (!r5 \|\| r2 \>= r3) ? r3 : r2 + 1l}"];
}
subgraph cluster_Region_1659083779 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0015|lint r2 = r2 \- 1l}"];
}
}
}
}
}
}
Node_6 [shape=record,label="{6\:\ 0x0008|RETURN\l|lreturn (short) r2l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0002|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0007|PHI: r2l  0x0007: PHI (r2v5 'volue' int) = (r2v1 'volue' int), (r2v3 'volue' int), (r2v4 'volue' int), (r2v6 'volue' int) binds: [B:18:0x001f, B:14:0x0015, B:11:0x000f, B:4:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000b|l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x001a|REMOVE\lADDED_TO_REGION\l|l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x001c|l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x001f|l}"];
MethodNode[shape=record,label="{public short dm.Ms.mathSpeedN((r1v0 'this' dm.Ms A[IMMUTABLE_TYPE, THIS]), (r2v0 'volue' int A[D('volue' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'maxv' int A[D('maxv' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'speed' int A[D('speed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'bb' boolean A[D('bb' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:11:0x000f \-\> B:5:0x0007, CROSS_EDGE: B:14:0x0015 \-\> B:5:0x0007, CROSS_EDGE: B:17:0x001c \-\> B:5:0x0007, CROSS_EDGE: B:18:0x001f \-\> B:5:0x0007, CROSS_EDGE: B:15:0x0018 \-\> B:18:0x001f, CROSS_EDGE: B:12:0x0011 \-\> B:15:0x0018, CROSS_EDGE: B:8:0x0009 \-\> B:12:0x0011, CROSS_EDGE: B:1:0x0000 \-\> B:8:0x0009\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_8[style=dashed];
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_5;
Node_8 -> Node_9;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_5;
Node_12 -> Node_13;
Node_12 -> Node_15[style=dashed];
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_14 -> Node_5;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_9 -> Node_10;
Node_16 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_5;
Node_18 -> Node_5;
}

