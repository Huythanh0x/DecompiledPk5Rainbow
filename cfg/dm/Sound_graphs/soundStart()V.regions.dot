digraph "CFG fordm.Sound.soundStart()V" {
subgraph cluster_Region_702388030 {
label = "R(1:(1:2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_659736338 {
label = "Try: R(1:2) catches: R(2:6|7)";
node [shape=record,color=blue];
subgraph cluster_Region_134870557 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0006, blocks: (B:2:0x0000), top: B:1:0x0000 \}\lCatch: Exception \-\> 0x0006\l|lr2.snd_music.start()     \/\/ Catch: java.lang.Exception \-\> L6l}"];
}
subgraph cluster_Region_590096543 {
label = "R(2:6|7) | ExcHandler: Exception \-\> 0x0006\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0006|ExcHandler: Exception \-\> 0x0006\l|l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|lr1.printStackTrace()l}"];
}
}
}
subgraph cluster_Region_590096543 {
label = "R(2:6|7) | ExcHandler: Exception \-\> 0x0006\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0006|ExcHandler: Exception \-\> 0x0006\l|l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|lr1.printStackTrace()l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0005|ORIG_RETURN\l|l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l|l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l|l}"];
MethodNode[shape=record,label="{public void dm.Sound.soundStart((r2v0 'this' dm.Sound A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lTryCatch #0 \{Exception \-\> 0x0006, blocks: (B:2:0x0000), top: B:1:0x0000 \}\lCROSS_EDGE: B:7:0x0007 \-\> B:3:0x0005, CROSS_EDGE: B:1:0x0000 \-\> B:6:0x0006\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_1 -> Node_6;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_8 -> Node_4;
}

