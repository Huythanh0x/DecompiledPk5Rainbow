digraph "CFG fordm.Ui.drawNum(Ljava\/lang\/String;IIII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x0004|lif (r16.length() != 0) goto L79l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\lORIG_RETURN\l|lreturnl}"];
Node_4 [shape=record,label="{4\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|lif (r19 != 0) goto L102l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|lr2 = 0l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|PHI: r2l  0x000a: PHI (r2v3 int) = (r2v2 int), (r2v36 int) binds: [B:71:0x004b, B:6:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|lbyte r12 = (byte) r2lr13 = 0l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|LOOP_START\lPHI: r12 r13l  0x000c: PHI (r12v1 'i' byte) = (r12v0 'i' byte), (r12v3 'i' byte) binds: [B:7:0x000a, B:31:0x000c] A[DONT_GENERATE, DONT_INLINE]l  0x000c: PHI (r13v1 'sw' short) = (r13v0 'sw' short), (r13v3 'sw' short) binds: [B:7:0x000a, B:31:0x000c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:8:0x000c\-\>B:31:0x000c\l|lif (r20 != 0) goto L103l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|lr14 = 8l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|PHI: r14l  0x0010: PHI (r14v2 'w' byte) = (r14v0 'w' byte), (r14v1 'w' byte), (r14v6 'w' byte) binds: [B:70:0x005b, B:69:0x0058, B:9:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|lr3 = \-1lchar r11 = r16.charAt(r12)l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|lif (r11 \< '0') goto L111l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|lif (r11 \> '9') goto L111l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|lbyte r3 = (byte) (r11 \- '0')l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|lif (r20 != 0) goto L107l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|lbyte r3 = (byte) (r3 + 10)l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|PHI: r3 r14l  0x002a: PHI (r3v7 'bid' byte) = l  (r3v1 'bid' byte)l  (r3v2 'bid' byte)l  (r3v3 'bid' byte)l  (r3v4 'bid' byte)l  (r3v5 'bid' byte)l  (r3v6 'bid' byte)l  (r3v9 'bid' byte)l  (r3v10 'bid' byte)l  (r3v11 'bid' byte)l binds: [B:65:0x0096, B:66:0x0098, B:63:0x008f, B:60:0x0088, B:56:0x007f, B:50:0x0070, B:47:0x0068, B:46:0x0064, B:16:0x0027] A[DONT_GENERATE, DONT_INLINE]l  0x002a: PHI (r14v5 'w' byte) = l  (r14v2 'w' byte)l  (r14v3 'w' byte)l  (r14v4 'w' byte)l  (r14v2 'w' byte)l  (r14v2 'w' byte)l  (r14v2 'w' byte)l  (r14v2 'w' byte)l  (r14v2 'w' byte)l  (r14v2 'w' byte)l binds: [B:65:0x0096, B:66:0x0098, B:63:0x008f, B:60:0x0088, B:56:0x007f, B:50:0x0070, B:47:0x0068, B:46:0x0064, B:16:0x0027] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|lif (r3 == (\-1)) goto L131l}"];
Node_19 [shape=record,label="{19\:\ 0x002d|lif (r19 != 0) goto L130l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|ldrawUi(r3, r17 + r13, r18, 36, 0)l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|lshort r13 = (short) (r13 + r14)l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|PHI: r13l  0x003d: PHI (r13v3 'sw' short) = (r13v2 'sw' short), (r13v4 'sw' short) binds: [B:42:0x00c4, B:21:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|lif (r19 != 0) goto L135l}"];
Node_23 [shape=record,label="{23\:\ 0x003f|lbyte r12 = (byte) (r12 + 1)l}"];
Node_24 [shape=record,label="{24\:\ 0x0042|PHI: r12l  0x0042: PHI (r12v3 'i' byte) = (r12v2 'i' byte), (r12v4 'i' byte) binds: [B:38:0x00e3, B:23:0x003f] A[DONT_GENERATE, DONT_INLINE]\l|lif (r19 != 0) goto L139l}"];
Node_25 [shape=record,label="{25\:\ 0x00e9|SYNTHETIC\l|l}"];
Node_26 [shape=record,label="{26\:\ 0x00e9|l}"];
Node_27 [shape=record,label="{27\:\ 0x00ea|lif (r12 \> (\-1)) goto L144l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|SYNTHETIC\l|l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
Node_30 [shape=record,label="{30\:\ 0x000c|SYNTHETIC\l|l}"];
Node_31 [shape=record,label="{31\:\ 0x000c|LOOP_END\lSYNTHETIC\lLOOP:0: B:8:0x000c\-\>B:31:0x000c\l|l}"];
Node_32 [shape=record,label="{32\:\ 0x0044|SYNTHETIC\l|l}"];
Node_33 [shape=record,label="{33\:\ 0x0044|l}"];
Node_34 [shape=record,label="{34\:\ 0x0048|lif (r12 \< r16.length()) goto L145l}"];
Node_35 [shape=record,label="{35\:\ 0x0006|SYNTHETIC\l|l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
Node_37 [shape=record,label="{37\:\ 0x000c|SYNTHETIC\l|l}"];
Node_38 [shape=record,label="{38\:\ 0x00e3|lbyte r12 = (byte) (r12 \- 1)l}"];
Node_39 [shape=record,label="{39\:\ 0x009d|ldrawUi(r3, r17 \- r13, r18, 40, 0)l}"];
Node_40 [shape=record,label="{40\:\ 0x00a9|lif (r19 != 0) goto L134l}"];
Node_41 [shape=record,label="{41\:\ 0x00ab|ldrawString(new java.lang.StringBuilder().append(r11).toString(), r17 + r13, r18 + 5, 36, 3, 0)l}"];
Node_42 [shape=record,label="{42\:\ 0x00c4|lshort r13 = (short) (r13 + 25)l}"];
Node_43 [shape=record,label="{43\:\ 0x00c9|ldrawString(new java.lang.StringBuilder().append(r11).toString(), r17 \- r13, r18 + 5, 40, 3, 0)l}"];
Node_44 [shape=record,label="{44\:\ 0x005e|l}"];
Node_45 [shape=record,label="{45\:\ 0x0062|lif (r20 != 1) goto L110l}"];
Node_46 [shape=record,label="{46\:\ 0x0064|lbyte r3 = (byte) (r3 + 35)l}"];
Node_47 [shape=record,label="{47\:\ 0x0068|lbyte r3 = (byte) (r3 + main.Key_H.KEY_NUM9)l}"];
Node_48 [shape=record,label="{48\:\ 0x006c|l}"];
Node_49 [shape=record,label="{49\:\ 0x006e|lif (r11 != '\/') goto L114l}"];
Node_50 [shape=record,label="{50\:\ 0x0070|lr3 = 20l}"];
Node_51 [shape=record,label="{51\:\ 0x0073|l}"];
Node_52 [shape=record,label="{52\:\ 0x0075|lif (r11 != '\-') goto L121l}"];
Node_53 [shape=record,label="{53\:\ 0x0077|l}"];
Node_54 [shape=record,label="{54\:\ 0x007b|lif (r20 != 2) goto L120l}"];
Node_55 [shape=record,label="{55\:\ 0x007d|lr2 = 56l}"];
Node_56 [shape=record,label="{56\:\ 0x007f|PHI: r2l  0x007f: PHI (r2v13 int) = (r2v12 int), (r2v14 int) binds: [B:57:0x0081, B:55:0x007d] A[DONT_GENERATE, DONT_INLINE]\l|lbyte r3 = (byte) r2l}"];
Node_57 [shape=record,label="{57\:\ 0x0081|lr2 = 46l}"];
Node_58 [shape=record,label="{58\:\ 0x0084|l}"];
Node_59 [shape=record,label="{59\:\ 0x0086|lif (r11 != '+') goto L124l}"];
Node_60 [shape=record,label="{60\:\ 0x0088|lr3 = main.Constants_H.f20l}"];
Node_61 [shape=record,label="{61\:\ 0x008b|l}"];
Node_62 [shape=record,label="{62\:\ 0x008d|lif (r11 != '%') goto L127l}"];
Node_63 [shape=record,label="{63\:\ 0x008f|lr3 = 45lr14 = 14l}"];
Node_64 [shape=record,label="{64\:\ 0x0094|l}"];
Node_65 [shape=record,label="{65\:\ 0x0096|lif (r11 != 32423) goto L91l}"];
Node_66 [shape=record,label="{66\:\ 0x0098|lr3 = 29lr14 = 12l}"];
Node_67 [shape=record,label="{67\:\ 0x0052|l}"];
Node_68 [shape=record,label="{68\:\ 0x0056|lif (r20 != 1) goto L106l}"];
Node_69 [shape=record,label="{69\:\ 0x0058|lr14 = 10l}"];
Node_70 [shape=record,label="{70\:\ 0x005b|lr14 = 14l}"];
Node_71 [shape=record,label="{71\:\ 0x004b|lint r2 = r16.length() \- 1l}"];
MethodNode[shape=record,label="{public void dm.Ui.drawNum((r15v0 'this' dm.Ui A[IMMUTABLE_TYPE, THIS]), (r16v0 'str' java.lang.String A[D('str' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'anchor' int A[D('anchor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 'type' int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:34:0x0048 \-\> B:8:0x000c, CROSS_EDGE: B:34:0x0048 \-\> B:3:0x0006, BACK_EDGE: B:27:0x00ea \-\> B:8:0x000c, CROSS_EDGE: B:27:0x00ea \-\> B:3:0x0006, CROSS_EDGE: B:38:0x00e3 \-\> B:24:0x0042, CROSS_EDGE: B:39:0x009d \-\> B:21:0x003a, CROSS_EDGE: B:42:0x00c4 \-\> B:22:0x003d, CROSS_EDGE: B:43:0x00c9 \-\> B:42:0x00c4, CROSS_EDGE: B:46:0x0064 \-\> B:17:0x002a, CROSS_EDGE: B:47:0x0068 \-\> B:17:0x002a, CROSS_EDGE: B:50:0x0070 \-\> B:17:0x002a, CROSS_EDGE: B:56:0x007f \-\> B:17:0x002a, CROSS_EDGE: B:57:0x0081 \-\> B:56:0x007f, CROSS_EDGE: B:60:0x0088 \-\> B:17:0x002a, CROSS_EDGE: B:63:0x008f \-\> B:17:0x002a, CROSS_EDGE: B:65:0x0096 \-\> B:17:0x002a, CROSS_EDGE: B:66:0x0098 \-\> B:17:0x002a, CROSS_EDGE: B:11:0x001a \-\> B:48:0x006c, CROSS_EDGE: B:69:0x0058 \-\> B:10:0x0010, CROSS_EDGE: B:70:0x005b \-\> B:10:0x0010, CROSS_EDGE: B:71:0x004b \-\> B:7:0x000a\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_71;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_67;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_48;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_48;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_44;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_40;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_39;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_38;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_32[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_4;
Node_30 -> Node_31;
Node_31 -> Node_8;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_36;
Node_36 -> Node_4;
Node_37 -> Node_31;
Node_38 -> Node_24;
Node_39 -> Node_21;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_22;
Node_43 -> Node_42;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_17;
Node_47 -> Node_17;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_17;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_58;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_57;
Node_55 -> Node_56;
Node_56 -> Node_17;
Node_57 -> Node_56;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_17;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_17;
Node_64 -> Node_65;
Node_65 -> Node_17;
Node_65 -> Node_66[style=dashed];
Node_66 -> Node_17;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_70;
Node_69 -> Node_10;
Node_70 -> Node_10;
Node_71 -> Node_7;
}

