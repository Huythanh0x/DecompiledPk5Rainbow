digraph "CFG forjavax.microedition.lcdui.Graphics.drawSubstring(Ljava\/lang\/String;IIIII)V" {
subgraph cluster_Region_1204049093 {
label = "R(4:(1:2)|(1:5)(1:(1:20)(1:(1:23)))|(1:8)(1:(1:14)(1:(1:17)))|9)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_187464360 {
label = "IF [B:1:0x0000] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lif (r13 == 0) goto L27l}"];
subgraph cluster_Region_1758096867 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0002|lr13 = 20l}"];
}
}
subgraph cluster_IfRegion_658980777 {
label = "IF [B:4:0x0006] THEN: R(1:5) ELSE: R(1:(1:20)(1:(1:23)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|lif ((r13 & 16) != 0) goto L30l}"];
subgraph cluster_Region_1119888888 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0008|lr12 \-= r7.font.getMetricsInt().topl}"];
}
subgraph cluster_Region_718405170 {
label = "R(1:(1:20)(1:(1:23))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_298789886 {
label = "IF [B:19:0x0030] THEN: R(1:20) ELSE: R(1:(1:23)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0030|lif ((r13 & 32) != 0) goto L38l}"];
subgraph cluster_Region_258733081 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0032|lr12 \-= r7.font.getMetricsInt().bottoml}"];
}
subgraph cluster_Region_1279782889 {
label = "R(1:(1:23)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1774364733 {
label = "IF [B:22:0x003e] THEN: R(1:23) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x003e|lif ((r13 & 2) != 0) goto L41l}"];
subgraph cluster_Region_29031968 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0040|lr12 += ((r7.font.getMetricsInt().descent \- r7.font.getMetricsInt().ascent) \/ 2) \- r7.font.getMetricsInt().descentl}"];
}
}
}
}
}
}
subgraph cluster_IfRegion_1369508146 {
label = "IF [B:7:0x0013] THEN: R(1:8) ELSE: R(1:(1:14)(1:(1:17)))";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0013|lif ((r13 & 1) != 0) goto L33l}"];
subgraph cluster_Region_585796680 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0015|lr7.font.tmpPaint.setTextAlign(android.graphics.Paint.Align.CENTER)l}"];
}
subgraph cluster_Region_1586846568 {
label = "R(1:(1:14)(1:(1:17))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_134800740 {
label = "IF [B:13:0x0060] THEN: R(1:14) ELSE: R(1:(1:17)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0060|lif ((r13 & 8) != 0) goto L44l}"];
subgraph cluster_Region_1362724302 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0062|lr7.font.tmpPaint.setTextAlign(android.graphics.Paint.Align.RIGHT)l}"];
}
subgraph cluster_Region_659016557 {
label = "R(1:(1:17)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1409125110 {
label = "IF [B:16:0x006e] THEN: R(1:17) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x006e|lif ((r13 & 4) != 0) goto L47l}"];
subgraph cluster_Region_470902312 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0070|lr7.font.tmpPaint.setTextAlign(android.graphics.Paint.Align.LEFT)l}"];
}
}
}
}
}
}
Node_9 [shape=record,label="{9\:\ 0x001e|lr7.canvas.drawText(r8, r9, r10 + r9, r11, r12, r7.font.tmpPaint)l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004|PHI: r13l  0x0004: PHI (r13v1 'anchor' int) = (r13v0 'anchor' int), (r13v2 'anchor' int) binds: [B:1:0x0000, B:2:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0011|PHI: r12l  0x0011: PHI (r12v3 'y' int) = (r12v0 'y' int), (r12v1 'y' int), (r12v2 'y' int), (r12v4 'y' int) binds: [B:22:0x003e, B:23:0x0040, B:20:0x0032, B:5:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002d|l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x005e|l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x006c|l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x002e|l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x003c|l}"];
MethodNode[shape=record,label="{public void javax.microedition.lcdui.Graphics.drawSubstring((r7v0 'this' javax.microedition.lcdui.Graphics A[IMMUTABLE_TYPE, THIS]), (r8v0 'str' java.lang.String A[D('str' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'offset' int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'len' int A[D('len' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'anchor' int A[D('anchor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:14:0x0062 \-\> B:9:0x001e, CROSS_EDGE: B:16:0x006e \-\> B:9:0x001e, CROSS_EDGE: B:17:0x0070 \-\> B:9:0x001e, CROSS_EDGE: B:20:0x0032 \-\> B:6:0x0011, CROSS_EDGE: B:22:0x003e \-\> B:6:0x0011, CROSS_EDGE: B:23:0x0040 \-\> B:6:0x0011, CROSS_EDGE: B:1:0x0000 \-\> B:3:0x0004\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_1 -> Node_3[style=dashed];
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_18[style=dashed];
Node_5 -> Node_6;
Node_19 -> Node_20;
Node_19 -> Node_21[style=dashed];
Node_20 -> Node_6;
Node_22 -> Node_6[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_12[style=dashed];
Node_8 -> Node_9;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_9;
Node_16 -> Node_9[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_9;
Node_9 -> Node_10;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_15 -> Node_16;
Node_18 -> Node_19;
Node_21 -> Node_22;
}

