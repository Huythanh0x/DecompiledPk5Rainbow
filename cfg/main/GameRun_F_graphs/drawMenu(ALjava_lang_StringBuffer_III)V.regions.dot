digraph "CFG formain.GameRun_F.drawMenu([Ljava\/lang\/StringBuffer;III)V" {
subgraph cluster_Region_38279289 {
label = "R(3:(1:3)(1:20)|4|(2:(1:8)(1:12)|10)) | DECL_VAR: byte color\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_317830327 {
label = "IF [B:2:0x0002] THEN: R(1:3) ELSE: R(1:20)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0002|lif (r12 \> 0) goto L25l}"];
subgraph cluster_Region_818457028 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|ldm.Ui.i().drawKuang(r10, r11, r12, (r9.length * 27) + 12)l}"];
}
subgraph cluster_Region_363232768 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0015|ldm.Ms.i()lint r12 = dm.Ms.abs(r12)l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0010|PHI: r12l  0x0010: PHI (r12v2 'w' int) = (r12v1 'w' int), (r12v0 'w' int) binds: [B:20:0x0015, B:3:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|lbyte r7 = 0l}"];
subgraph cluster_LoopRegion_34027753 {
label = "LOOP:0: (2:(1:8)(1:12)|10)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0012|ADDED_TO_REGION\l|lif (r7 \< r9.length) goto L31l}"];
subgraph cluster_Region_1304996600 {
label = "R(2:(1:8)(1:12)|10)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_10908871 {
label = "IF [B:7:0x001d] THEN: R(1:8) ELSE: R(1:12)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001d|lif (r7 == 0) goto L32l}"];
subgraph cluster_Region_1249432229 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001f|lr5 = 9l}"];
}
subgraph cluster_Region_1114582906 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0040|lr5 = r7 == r8.cur_a ? (byte) 8 : (byte) 0l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0021|LOOP_END\lPHI: r5l  0x0021: PHI (r5v3 'color' byte) = (r5v2 'color' byte), (r5v4 'color' byte) binds: [B:14:0x0021, B:9:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0011\-\>B:10:0x0021\l|ldm.Ui.i().drawString(r9[r7].toString(), (r12 \>\> 1) + r10, r11 + 4 + (r7 * 27), 1 \| 16, r5, 0)lbyte r7 = (byte) (r7 + 1)l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0000|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0011|LOOP_START\lPHI: r7l  0x0011: PHI (r7v1 'd' byte) = (r7v0 'd' byte), (r7v2 'd' byte) binds: [B:4:0x0010, B:10:0x0021] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0011\-\>B:10:0x0021\l|l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0021|SYNTHETIC\l|l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x003e|l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0042|l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0021|SYNTHETIC\l|l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0045|l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0021|SYNTHETIC\l|l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0014|SYNTHETIC\l|l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0014|l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{public void main.GameRun_F.drawMenu((r8v0 'this' main.GameRun_F A[IMMUTABLE_TYPE, THIS]), (r9v0 'menu' java.lang.StringBuffer[] A[D('menu' java.lang.StringBuffer[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'w' int A[D('w' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:10:0x0021 \-\> B:5:0x0011, CROSS_EDGE: B:13:0x0042 \-\> B:10:0x0021, CROSS_EDGE: B:15:0x0045 \-\> B:10:0x0021, CROSS_EDGE: B:20:0x0015 \-\> B:4:0x0010\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_2 -> Node_20[style=dashed];
Node_3 -> Node_4;
Node_20 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_17[style=dashed];
Node_7 -> Node_8;
Node_7 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_12 -> Node_13;
Node_12 -> Node_15;
Node_10 -> Node_5;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_5 -> Node_6;
Node_9 -> Node_10;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_10;
Node_15 -> Node_16;
Node_16 -> Node_10;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

