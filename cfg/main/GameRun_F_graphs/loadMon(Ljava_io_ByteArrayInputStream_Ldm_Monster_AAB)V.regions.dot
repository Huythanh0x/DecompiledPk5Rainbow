digraph "CFG formain.GameRun_F.loadMon(Ljava\/io\/ByteArrayInputStream;Ldm\/Monster;[[B)V" {
subgraph cluster_Region_530804433 {
label = "R(3:1|(1:4)|6)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lr7.monster = new byte[18]lr7.monsterPro = new short[8]lr6.read(r7.monster)lr5.len = new byte[10]lr6.read(r5.len)lint r0 = 0l}"];
subgraph cluster_LoopRegion_1659028743 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001e|ADDED_TO_REGION\l|lif (r0 \< 5) goto L16l}"];
subgraph cluster_Region_1493974889 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x002e|LOOP_END\lLOOP:0: B:2:0x001d\-\>B:4:0x002e\l|lr7.monsterPro[r0] = (short) (((r5.len[(r0 * 2) + 1] & 255) \<\< 8) \| (r5.len[(r0 * 2) + 0] & 255))lr0++l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0020|lr7.setProAFD(r8[r7.monster[0]])lr5.len = nulll}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x001d|LOOP_START\lPHI: r0l  0x001d: PHI (r0v1 'i' int) = (r0v0 'i' int), (r0v2 'i' int) binds: [B:1:0x0000, B:4:0x002e] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x001d\-\>B:4:0x002e\l|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0020|SYNTHETIC\l|l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002d|l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{public void main.GameRun_F.loadMon((r5v0 'this' main.GameRun_F A[IMMUTABLE_TYPE, THIS]), (r6v0 'byteArray' java.io.ByteArrayInputStream A[D('byteArray' java.io.ByteArrayInputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'mon' dm.Monster A[D('mon' dm.Monster), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'data' byte[][] A[D('data' byte[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/io\/IOException;]\lINLINE_NOT_NEEDED\lBACK_EDGE: B:4:0x002e \-\> B:2:0x001d\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_2;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
}

