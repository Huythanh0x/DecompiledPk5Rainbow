digraph "CFG formain.GameRun.allAdd(I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lr1 = falselr0 = falsel}"];
Node_2 [shape=record,label="{2\:\ 0x0014|lif (r9.myMonsters[r9.select[0][0]].monsterPro[0] \>= 1) goto L32l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|lsay(new java.lang.StringBuilder(java.lang.String.valueOf(getNameMon(r9.myMonsters[r9.select[0][0]].monster[0]))).append(main.Constants_H.TXT_0).toString(), 0)l}"];
Node_4 [shape=record,label="{4\:\ 0x003e|RETURN\lORIG_RETURN\l|lreturnl}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x003f|l}"];
Node_7 [shape=record,label="{7\:\ 0x005b|lif (r9.myMonsters[r9.select[0][0]].monsterPro[1] \>= r9.myMonsters[r9.select[0][0]].monsterPro[3]) goto L37l}"];
Node_8 [shape=record,label="{8\:\ 0x005d|l}"];
Node_9 [shape=record,label="{9\:\ 0x006b|lif (r9.myMonsters[r9.select[0][0]].monsterPro[0] \<= 0) goto L37l}"];
Node_10 [shape=record,label="{10\:\ 0x006d|lAddMP((r9.myMonsters[r9.select[0][0]].monsterPro[3] * r10) \/ 100, r9.myMonsters[r9.select[0][0]])lr1 = truel}"];
Node_11 [shape=record,label="{11\:\ 0x008c|PHI: r1l  0x008c: PHI (r1v1 'bmp' boolean) = (r1v0 'bmp' boolean), (r1v0 'bmp' boolean), (r1v2 'bmp' boolean) binds: [B:7:0x005b, B:9:0x006b, B:10:0x006d] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_12 [shape=record,label="{12\:\ 0x00a8|lif (r9.myMonsters[r9.select[0][0]].monsterPro[0] \>= r9.myMonsters[r9.select[0][0]].monsterPro[2]) goto L42l}"];
Node_13 [shape=record,label="{13\:\ 0x00aa|l}"];
Node_14 [shape=record,label="{14\:\ 0x00b8|lif (r9.myMonsters[r9.select[0][0]].monsterPro[0] \<= 0) goto L42l}"];
Node_15 [shape=record,label="{15\:\ 0x00ba|lAddHP((r9.myMonsters[r9.select[0][0]].monsterPro[2] * r10) \/ 100, r9.myMonsters[r9.select[0][0]])lr0 = truel}"];
Node_16 [shape=record,label="{16\:\ 0x00d9|PHI: r0l  0x00d9: PHI (r0v1 'bhp' boolean) = (r0v0 'bhp' boolean), (r0v0 'bhp' boolean), (r0v3 'bhp' boolean) binds: [B:12:0x00a8, B:14:0x00b8, B:15:0x00ba] A[DONT_GENERATE, DONT_INLINE]\l|lif (r0 != false) goto L44l}"];
Node_17 [shape=record,label="{17\:\ 0x00db|lif (r1 == false) goto L45l}"];
Node_18 [shape=record,label="{18\:\ 0x00e6|l}"];
Node_19 [shape=record,label="{19\:\ 0x00f4|lif (r9.myMonsters[r9.select[0][0]].monsterPro[0] \>= 1) goto L48l}"];
Node_20 [shape=record,label="{20\:\ 0x00f6|lAddHP((r9.myMonsters[r9.select[0][0]].monsterPro[2] * r10) \/ 100, r9.myMonsters[r9.select[0][0]])l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
Node_22 [shape=record,label="{22\:\ 0x0117|lsay(new java.lang.StringBuilder(java.lang.String.valueOf(getNameMon(r9.myMonsters[r9.select[0][0]].monster[0]))).append(main.Constants_H.TXT_1).toString(), 0)l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
Node_24 [shape=record,label="{24\:\ 0x00dd|luseState(0, r9.select_it[0])l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
MethodNode[shape=record,label="{private void main.GameRun.allAdd((r9v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r10v0 'hp' int A[D('hp' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:24:0x00dd \-\> B:4:0x003e, CROSS_EDGE: B:20:0x00f6 \-\> B:4:0x003e, CROSS_EDGE: B:22:0x0117 \-\> B:4:0x003e, CROSS_EDGE: B:16:0x00d9 \-\> B:24:0x00dd, CROSS_EDGE: B:14:0x00b8 \-\> B:16:0x00d9, CROSS_EDGE: B:12:0x00a8 \-\> B:16:0x00d9, CROSS_EDGE: B:9:0x006b \-\> B:11:0x008c, CROSS_EDGE: B:7:0x005b \-\> B:11:0x008c\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_24[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_5;
Node_22 -> Node_23;
Node_23 -> Node_5;
Node_24 -> Node_25;
Node_25 -> Node_5;
}

