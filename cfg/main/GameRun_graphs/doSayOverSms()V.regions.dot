digraph "CFG formain.GameRun.doSayOverSms()V" {
subgraph cluster_Region_1813640012 {
label = "R(2:1|(1:3)(1:(1:(1:7))))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lbyte int r0 = r5.sayOverSmsljava.lang.System.out.println(\"doSayOverSms() sayOverSms= \" + ((int) r5.sayOverSms))lr5.sayOverSms = (byte) \-1l}"];
subgraph cluster_IfRegion_1683757972 {
label = "IF [B:2:0x001c] THEN: R(1:3) ELSE: R(1:(1:(1:7)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x001c|lif (r0 == 0) goto L14l}"];
subgraph cluster_Region_1607208711 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001e|lmain.GameRun.isSay = truelmain.SMSSender.i(r5).go(4, true)lmain.GameRun.isSay = falsel}"];
}
subgraph cluster_Region_65636883 {
label = "R(1:(1:(1:7))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_Region_492021388 {
label = "R(1:(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1864311812 {
label = "IF [B:6:0x002c] THEN: R(1:7) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002c|lif (r0 == 1) goto L17l}"];
subgraph cluster_Region_1758384420 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x002e|lmain.SMSSender.i(r5).go(3, true)l}"];
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x002b|ORIG_RETURN\l|l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l|l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l|l}"];
MethodNode[shape=record,label="{public void main.GameRun.doSayOverSms((r5v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:6:0x002c \-\> B:4:0x002b, CROSS_EDGE: B:7:0x002e \-\> B:4:0x002b\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_6[style=dashed];
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_6 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_8 -> Node_5;
Node_9 -> Node_5;
}

