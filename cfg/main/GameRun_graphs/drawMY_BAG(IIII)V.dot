digraph "CFG formain.GameRun.drawMY_BAG(IIII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lbyte r9 = (byte) (r11.action_str.length \- 1)ldm.Ui.i().fillRectB()ldm.Ui.i().drawK2(r12 + 1, r13 + 3, r14 \- 2, r15 \- 3, 0)ldm.Ui.i().drawK1(r12 + 5, (r13 + 25) + 14, r14 \- 23, r11.list_rows * 31, 1)ldm.Ui.i().drawK1(r12 + 5, ((r13 + 25) + 20) + (r11.list_rows * 31), r14 \- 10, 90, 2)l}"];
Node_2 [shape=record,label="{2\:\ 0x004e|lif (r9 != 0) goto L55l}"];
Node_3 [shape=record,label="{3\:\ 0x0050|ldm.Ui.i().drawK1((((r14 \>\> 1) + r12) \- 25) \- 9, r13 + 8, 66, 28, 4)ldm.Ui.i().drawString(r11.action_str[r9], (r14 \>\> 1) + r12, r13 + 7, 17, 0, 0)landroid.util.Log.e(\"sk\", \"drawMY_BAG\")l}"];
Node_4 [shape=record,label="{4\:\ 0x0082|ldrawItemList(r12 + 9, (r13 + 25) + 17, r14 \- 23, r11.list_rows, r11.select[0], r11.selectx, r11.itemsLength[r11.selectx], 0)ldm.Ui.i().sliding((r12 + r14) \- 15, (r13 + 25) + 17, (r11.list_rows * 31) \- 6, r11.select[0][0], r11.itemsLength[r11.selectx], true)l}"];
Node_5 [shape=record,label="{5\:\ 0x00cb|lif (r11.itemsLength[r11.selectx] \<= 0) goto L45l}"];
Node_6 [shape=record,label="{6\:\ 0x00cd|lint r3 = r11.list_rows * 31lshowStringM(r11.item_help[r11.items[r11.selectx][r11.select[0][0]][0]].toString(), r12 + (r14 \>\> 1), r3 + ((r13 + 25) + 22), 10, 3)l}"];
Node_7 [shape=record,label="{7\:\ 0x00fc|lint r0 = (r14 \>\> 1) + r12lint r1 = (r13 + r15) \- 2l}"];
Node_8 [shape=record,label="{8\:\ 0x0107|lif (r11.selectx != 2) goto L68l}"];
Node_9 [shape=record,label="{9\:\ 0x0109|lr3 = truel}"];
Node_10 [shape=record,label="{10\:\ 0x010a|PHI: r3l  0x010a: PHI (r3v21 boolean) = (r3v20 boolean), (r3v23 boolean) binds: [B:20:0x01c1, B:9:0x0109] A[DONT_GENERATE, DONT_INLINE]\l|ldrawMoney(r0, r1, 0, r3)ldm.Ui r0 = dm.Ui.i()l}"];
Node_11 [shape=record,label="{11\:\ 0x0117|lif (r11.itemsLength[r11.selectx] != 0) goto L69l}"];
Node_12 [shape=record,label="{12\:\ 0x0119|lr1 = falsel}"];
Node_13 [shape=record,label="{13\:\ 0x011a|PHI: r1l  0x011a: PHI (r1v29 boolean) = (r1v28 boolean), (r1v32 boolean) binds: [B:19:0x01c4, B:12:0x0119] A[DONT_GENERATE, DONT_INLINE]\l|lr0.drawYesNo(r1, true)l}"];
Node_14 [shape=record,label="{14\:\ 0x0121|lif (r11.popMenu == (\-1)) goto L73l}"];
Node_15 [shape=record,label="{15\:\ 0x0123|ldrawSelectMenu(r11.about_a, (((r14 \>\> 1) + r12) \- 25) \- 8, 50, 75, 2, 0, r11.popMenu)l}"];
Node_16 [shape=record,label="{16\:\ 0x013b|RETURN\lORIG_RETURN\l|lreturnl}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
Node_19 [shape=record,label="{19\:\ 0x01c4|lr1 = truel}"];
Node_20 [shape=record,label="{20\:\ 0x01c1|lr3 = falsel}"];
Node_21 [shape=record,label="{21\:\ 0x013c|ldm.Ui.i().drawK1(((((r11.selectx + 1) * r14) \/ 5) + r12) \- 22, r13 + 8, 70, 28, 4)l}"];
Node_22 [shape=record,label="{22\:\ 0x0155|LOOP_START\lPHI: r9l  0x0155: PHI (r9v1 'i' byte) = (r9v0 'i' byte), (r9v2 'i' byte) binds: [B:21:0x013c, B:28:0x01b6] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:22:0x0155\-\>B:28:0x01b6\l|l}"];
Node_23 [shape=record,label="{23\:\ 0x0156|lif (r9 \> (\-1)) goto L63l}"];
Node_24 [shape=record,label="{24\:\ 0x019d|ldm.Ui r0 = dm.Ui.i()lr1 = r11.action_str[r9]lint r2 = ((((r9 + 1) * r14) \/ 5) + r12) \- 14lint r3 = r13 + 7l}"];
Node_25 [shape=record,label="{25\:\ 0x01b3|lif (r11.selectx != r9) goto L67l}"];
Node_26 [shape=record,label="{26\:\ 0x01b5|lr5 = 0l}"];
Node_27 [shape=record,label="{27\:\ 0x01b6|SYNTHETIC\l|l}"];
Node_28 [shape=record,label="{28\:\ 0x01b6|LOOP_END\lPHI: r5l  0x01b6: PHI (r5v8 int) = (r5v7 int), (r5v9 int) binds: [B:30:0x01b6, B:27:0x01b6] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:22:0x0155\-\>B:28:0x01b6\l|lr0.drawString(r1, r2, r3, 0, r5, 0)lbyte r9 = (byte) (r9 \- 1)l}"];
Node_29 [shape=record,label="{29\:\ 0x01bf|lr5 = 1l}"];
Node_30 [shape=record,label="{30\:\ 0x01b6|SYNTHETIC\l|l}"];
Node_31 [shape=record,label="{31\:\ 0x0158|SYNTHETIC\l|l}"];
Node_32 [shape=record,label="{32\:\ 0x0158|ldm.Ui.i().drawTriangle((r14 \>\> 1) + r12, r13 + 14, 354, true, true)l}"];
Node_33 [shape=record,label="{33\:\ 0x016b|lif (r11.popMenu != (\-1)) goto L42l}"];
Node_34 [shape=record,label="{34\:\ 0x016d|lbyte r10 = r11.pkey.selectMenuX(4, 0, 0, r14 \/ 4, 35)l}"];
Node_35 [shape=record,label="{35\:\ 0x017b|lif (r10 == (\-1)) goto L42l}"];
Node_36 [shape=record,label="{36\:\ 0x017d|lr11.selectx = r10lr11.select[0][1] = r11.select_st[r11.selectx]lr11.select[0][0] = r11.select_it[r11.selectx]l}"];
MethodNode[shape=record,label="{private void main.GameRun.drawMY_BAG((r11v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r12v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'w' int A[D('w' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'h' int A[D('h' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:14:0x0121 \-\> B:16:0x013b, CROSS_EDGE: B:19:0x01c4 \-\> B:13:0x011a, CROSS_EDGE: B:20:0x01c1 \-\> B:10:0x010a, CROSS_EDGE: B:5:0x00cb \-\> B:7:0x00fc, CROSS_EDGE: B:33:0x016b \-\> B:4:0x0082, CROSS_EDGE: B:35:0x017b \-\> B:4:0x0082, CROSS_EDGE: B:36:0x017d \-\> B:4:0x0082, BACK_EDGE: B:28:0x01b6 \-\> B:22:0x0155, CROSS_EDGE: B:29:0x01bf \-\> B:28:0x01b6\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_21;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_17;
Node_19 -> Node_13;
Node_20 -> Node_10;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_31[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_22;
Node_29 -> Node_30;
Node_30 -> Node_28;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_4;
Node_33 -> Node_34[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_4;
Node_35 -> Node_36[style=dashed];
Node_36 -> Node_4;
}

