digraph "CFG formain.GameRun.drawMonList([Ldm\/Monster;IIII[B)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lr7 = r14[1]l}"];
Node_2 [shape=record,label="{2\:\ 0x0006|lif (r8.mini_state == 6) goto L84l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|ljavax.microedition.lcdui.Graphics r4 = main.GameRun.gljavax.microedition.lcdui.Graphics r5 = main.GameRun.gldm.Ui.i().drawUi(34, (r10 \- 50) \- 5, r11 + 2, 8 \| 16, 0)l}"];
Node_4 [shape=record,label="{4\:\ 0x0022|SYNTHETIC\l|l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|LOOP_START\lPHI: r7l  0x0022: PHI (r7v1 'i' byte A[IMMUTABLE_TYPE]) = (r7v0 'i' byte), (r7v2 'i' byte) binds: [B:4:0x0022, B:22:0x009d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0022\-\>B:22:0x009d\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|lif (r7 \>= (r14[1] + r12)) goto L78l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|lif (r7 \< r13) goto L52l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|lif (r14[0] != r7) goto L55l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|ldm.Ui.i().drawK(r10 \- 50, ((r7 \- r14[1]) * 29) + r11, 108, 26, 1)l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|ldm.Ui r0 = dm.Ui.i()ljava.lang.String r1 = getNameMon(r9[r7].monster[0]).toString()lint r2 = r10 + 4lint r3 = (r11 \- 2) + ((r7 \- r14[1]) * 29)l}"];
Node_12 [shape=record,label="{12\:\ 0x006d|lif (r14[0] != r7) goto L66l}"];
Node_13 [shape=record,label="{13\:\ 0x006f|lr5 = 0l}"];
Node_14 [shape=record,label="{14\:\ 0x0070|PHI: r5l  0x0070: PHI (r5v3 int) = (r5v2 int), (r5v4 int) binds: [B:37:0x00a1, B:13:0x006f] A[DONT_GENERATE, DONT_INLINE]\l|lr0.drawString(r1, r2, r3, 17, r5, 1)l}"];
Node_15 [shape=record,label="{15\:\ 0x0077|lif (r8.popMenu != (\-1)) goto L81l}"];
Node_16 [shape=record,label="{16\:\ 0x0079|l}"];
Node_17 [shape=record,label="{17\:\ 0x008f|lif (r8.pkey.isSelect(r10 \- 50, ((r7 \- r14[1]) * 29) + r11, 100, 26) == false) goto L82l}"];
Node_18 [shape=record,label="{18\:\ 0x0091|l}"];
Node_19 [shape=record,label="{19\:\ 0x0094|lif (r14[0] != r7) goto L67l}"];
Node_20 [shape=record,label="{20\:\ 0x0096|ldm.Ms.key = 53ldm.Ms.keyRepeat = truel}"];
Node_21 [shape=record,label="{21\:\ 0x009d|SYNTHETIC\l|l}"];
Node_22 [shape=record,label="{22\:\ 0x009d|LOOP_END\lLOOP:0: B:5:0x0022\-\>B:22:0x009d\l|lbyte r7 = (byte) (r7 + 1)l}"];
Node_23 [shape=record,label="{23\:\ 0x00a3|lr14[0] = r7l}"];
Node_24 [shape=record,label="{24\:\ 0x00ab|lif ((r7 \- r14[1]) != 0) goto L73l}"];
Node_25 [shape=record,label="{25\:\ 0x00ad|l}"];
Node_26 [shape=record,label="{26\:\ 0x00b0|lif (r14[1] \<= 0) goto L73l}"];
Node_27 [shape=record,label="{27\:\ 0x00b2|lr14[1] = (byte) (r14[1] \- 1)l}"];
Node_28 [shape=record,label="{28\:\ 0x00ba|linitMonStream(2, r8.mList_id[r9[r14[0]].monster[0]][0], 1)lsetShowPro(r9[r14[0]])lr8.introT = main.Constants_H.WIDTH_Hlr8.introX = main.Constants_H.WIDTH_Hl}"];
Node_29 [shape=record,label="{29\:\ 0x009d|SYNTHETIC\l|l}"];
Node_30 [shape=record,label="{30\:\ 0x00e1|l}"];
Node_31 [shape=record,label="{31\:\ 0x00e9|lif ((r7 \- r14[1]) != (r12 \- 1)) goto L72l}"];
Node_32 [shape=record,label="{32\:\ 0x00eb|l}"];
Node_33 [shape=record,label="{33\:\ 0x00ef|lif ((r14[1] + r12) \>= r13) goto L72l}"];
Node_34 [shape=record,label="{34\:\ 0x00f1|lr14[1] = (byte) (r14[1] + 1)l}"];
Node_35 [shape=record,label="{35\:\ 0x009d|SYNTHETIC\l|l}"];
Node_36 [shape=record,label="{36\:\ 0x009d|SYNTHETIC\l|l}"];
Node_37 [shape=record,label="{37\:\ 0x00a1|lr5 = 1l}"];
Node_38 [shape=record,label="{38\:\ 0x002a|SYNTHETIC\l|l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
Node_40 [shape=record,label="{40\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_41 [shape=record,label="{41\:\ 0x002a|SYNTHETIC\l|l}"];
Node_42 [shape=record,label="{42\:\ 0x002a|RETURN\lORIG_RETURN\l|lreturnl}"];
MethodNode[shape=record,label="{private void main.GameRun.drawMonList((r8v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r9v0 'monster' dm.Monster[] A[D('monster' dm.Monster[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'show_num' int A[D('show_num' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'max_length' int A[D('max_length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'select' byte[] A[D('select' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:22:0x009d \-\> B:5:0x0022, CROSS_EDGE: B:28:0x00ba \-\> B:22:0x009d, CROSS_EDGE: B:31:0x00e9 \-\> B:28:0x00ba, CROSS_EDGE: B:33:0x00ef \-\> B:28:0x00ba, CROSS_EDGE: B:34:0x00f1 \-\> B:28:0x00ba, CROSS_EDGE: B:24:0x00ab \-\> B:30:0x00e1, CROSS_EDGE: B:17:0x008f \-\> B:22:0x009d, CROSS_EDGE: B:15:0x0077 \-\> B:22:0x009d, CROSS_EDGE: B:37:0x00a1 \-\> B:14:0x0070, CROSS_EDGE: B:9:0x002e \-\> B:11:0x0048, CROSS_EDGE: B:6:0x0026 \-\> B:42:0x002a, CROSS_EDGE: B:2:0x0006 \-\> B:5:0x0022\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_41;
Node_7 -> Node_8;
Node_7 -> Node_38[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_37;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_36;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_35;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_5;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_22;
Node_30 -> Node_31;
Node_31 -> Node_28;
Node_31 -> Node_32[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_28;
Node_33 -> Node_34[style=dashed];
Node_34 -> Node_28;
Node_35 -> Node_22;
Node_36 -> Node_22;
Node_37 -> Node_14;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_41 -> Node_42;
Node_42 -> Node_40;
}

