digraph "CFG formain.GameRun.findItem(IIZ)B" {
subgraph cluster_Region_2128065374 {
label = "R(4:1|(1:3)|(1:(2:(1:11)|(1:9)))|21)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lbyte r0 = 0l}"];
subgraph cluster_IfRegion_1033044936 {
label = "IF [B:2:0x0003] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0003|lif (r4 == (\-2)) goto L27l}"];
subgraph cluster_Region_2028687797 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|lbyte r4 = findItemType(r5)l}"];
}
}
subgraph cluster_LoopRegion_1581312005 {
label = "LOOP:0: (1:(2:(1:11)|(1:9)))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000d|ADDED_TO_REGION\l|lif (r0 \< r3.itemsLength[r4]) goto L34l}"];
subgraph cluster_Region_868663268 {
label = "R(1:(2:(1:11)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1571468590 {
label = "R(2:(1:11)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_881021948 {
label = "IF [B:8:0x001c] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001c|lif (r3.items[r4][r0][0] == r5) goto L41l}"];
subgraph cluster_Region_2005752689 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001e|RETURN\l|lreturn r6 ? r3.items[r4][r0][1] : r0l}"];
}
}
subgraph cluster_Region_1228493964 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002c|LOOP_END\lLOOP:0: B:5:0x0009\-\>B:9:0x002c\l|lbyte r0 = (byte) (r0 + 1)l}"];
}
}
}
}
Node_21 [shape=record,label="{21\:\ 0x0013|RETURN\lORIG_RETURN\l|lreturn (byte) (r6 ? 0 : \-1)l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0009|SYNTHETIC\lPHI: r4l  0x0009: PHI (r4v1 'item_type' int) = (r4v0 'item_type' int), (r4v2 'item_type' int) binds: [B:2:0x0003, B:3:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0009|LOOP_START\lPHI: r0l  0x0009: PHI (r0v1 'i' byte) = (r0v0 'i' byte), (r0v2 'i' byte) binds: [B:4:0x0009, B:9:0x002c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x0009\-\>B:9:0x002c\l|l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0014|l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001e|SYNTHETIC\l|l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0020|l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l|l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x002a|l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|SYNTHETIC\l|l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000f|SYNTHETIC\l|l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000f|l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0011|l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0012|PHI: r1l  0x0012: PHI (r1v4 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0030|l}"];
MethodNode[shape=record,label="{public byte main.GameRun.findItem((r3v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r4v0 'item_type' int A[D('item_type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'item_id' int A[D('item_id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'bb' boolean A[D('bb' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:22:0x0030 \-\> B:20:0x0012, CROSS_EDGE: B:12:0x0020 \-\> B:21:0x0013, CROSS_EDGE: B:15:0x002a \-\> B:21:0x0013, BACK_EDGE: B:9:0x002c \-\> B:5:0x0009, CROSS_EDGE: B:2:0x0003 \-\> B:5:0x0009\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_4[style=dashed];
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_6 -> Node_17[style=dashed];
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_11 -> Node_12;
Node_11 -> Node_15;
Node_9 -> Node_5;
Node_21 -> Node_14;
Node_0 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_14;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_22 -> Node_20;
}

