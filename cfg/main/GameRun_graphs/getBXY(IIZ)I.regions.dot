digraph "CFG formain.GameRun.getBXY(IIZ)I" {
subgraph cluster_Region_677761016 {
label = "R(3:1|(1:5)|6)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lint r0 = 266lint r1 = 236l}"];
subgraph cluster_IfRegion_218854394 {
label = "IF [B:2:0x0005, B:4:0x000b, B:12:0x000d, B:14:0x0013] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|lif (r4 == 1) goto L19l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|ADDED_TO_REGION\l|lif (isSkillToMe(r5) == false) goto L24l}"];
Node_12 [shape=record,label="{12\:\ 0x000d|ADDED_TO_REGION\l|lif (r4 == 0) goto L22l}"];
Node_14 [shape=record,label="{14\:\ 0x0013|ADDED_TO_REGION\l|lif (isSkillToMe(r5) != false) goto L24l}"];
subgraph cluster_Region_160521729 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|lr0 = 377lr1 = 97l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0019|RETURN\lPHI: r0 r1l  0x0019: PHI (r0v1 'x' int) = (r0v0 'x' int), (r0v0 'x' int), (r0v2 'x' int) binds: [B:12:0x000d, B:14:0x0013, B:5:0x0015] A[DONT_GENERATE, DONT_INLINE]l  0x0019: PHI (r1v1 'y' int) = (r1v0 'y' int), (r1v0 'y' int), (r1v2 'y' int) binds: [B:12:0x000d, B:14:0x0013, B:5:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|lreturn r6 ? r0 : r1l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007|l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001b|l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001c|ORIG_RETURN\l|l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001d|l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l|l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000f|l}"];
MethodNode[shape=record,label="{private int main.GameRun.getBXY((r3v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r4v0 'state' int A[D('state' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'skill' int A[D('skill' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'bb' boolean A[D('bb' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:10:0x001d \-\> B:8:0x001c, CROSS_EDGE: B:14:0x0013 \-\> B:6:0x0019, CROSS_EDGE: B:12:0x000d \-\> B:6:0x0019, CROSS_EDGE: B:4:0x000b \-\> B:5:0x0015, CROSS_EDGE: B:2:0x0005 \-\> B:12:0x000d\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_12[style=dashed];
Node_4 -> Node_12[style=dashed];
Node_4 -> Node_5;
Node_12 -> Node_13;
Node_12 -> Node_6[style=dashed];
Node_14 -> Node_5;
Node_14 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_9;
Node_13 -> Node_14;
}

