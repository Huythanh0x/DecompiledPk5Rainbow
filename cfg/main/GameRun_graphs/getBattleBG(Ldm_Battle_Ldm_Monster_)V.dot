digraph "CFG formain.GameRun.getBattleBG(Ldm\/Battle;Ldm\/Monster;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|lif (r3.monPro.length == 0) goto L21l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|lr4.bg_id = r3.monPro[0]l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|lr0 = 0l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|LOOP_START\lPHI: r0l  0x000d: PHI (r0v1 'i' byte) = (r0v0 'i' byte), (r0v2 'i' byte) binds: [B:4:0x000c, B:9:0x001c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:5:0x000d\-\>B:9:0x001c\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|lif (r0 \< 5) goto L25l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|lif (r5.isMonReel(r0 + main.Constants_H.f89) == false) goto L28l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|LOOP_END\lLOOP:0: B:5:0x000d\-\>B:9:0x001c\l|lbyte r0 = (byte) (r0 + 1)l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|SYNTHETIC\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|lr4.bg_id = r0l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|RETURN\lORIG_RETURN\l|lreturnl}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_14 [shape=record,label="{14\:\ 0x0010|SYNTHETIC\l|l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
MethodNode[shape=record,label="{private void main.GameRun.getBattleBG((r3v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r4v0 'be' dm.Battle A[D('be' dm.Battle), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'mon' dm.Monster A[D('mon' dm.Monster), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:11:0x0019 \-\> B:12:0x0010, BACK_EDGE: B:9:0x001c \-\> B:5:0x000d, CROSS_EDGE: B:2:0x0003 \-\> B:4:0x000c\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_14[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_5;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_15 -> Node_13;
}

