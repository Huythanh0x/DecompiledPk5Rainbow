digraph "CFG formain.GameRun.getExpOne(Z)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lr0 = 0lr5.exp = 0ldm.Ms.i()ldm.Ms.skip2 = r5.enB.mon[0].monster[2]l}"];
Node_2 [shape=record,label="{2\:\ 0x0014|LOOP_START\lPHI: r0l  0x0014: PHI (r0v1 'i' byte) = (r0v0 'i' byte), (r0v2 'i' byte) binds: [B:1:0x0000, B:8:0x0073] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0014\-\>B:8:0x0073\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|lif (r0 \< r5.enB.mon.length) goto L26l}"];
Node_4 [shape=record,label="{4\:\ 0x003f|lr5.exp = (short) (r5.exp + ((r5.enB.mon[r0].monster[2] * 3) + 80))lr1 = r5.enB.mon[r0].monster[2]ldm.Ms.i()l}"];
Node_5 [shape=record,label="{5\:\ 0x0062|lif (r1 \<= dm.Ms.skip2) goto L32l}"];
Node_6 [shape=record,label="{6\:\ 0x0064|ldm.Ms.i()ldm.Ms.skip2 = r5.enB.mon[r0].monster[2]l}"];
Node_7 [shape=record,label="{7\:\ 0x0073|SYNTHETIC\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x0073|LOOP_END\lLOOP:0: B:2:0x0014\-\>B:8:0x0073\l|lbyte r0 = (byte) (r0 + 1)l}"];
Node_9 [shape=record,label="{9\:\ 0x0073|SYNTHETIC\l|l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|SYNTHETIC\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|lr5.exp = (short) ((r5.exp * (((56 \/ r5.mon_in_battle[0]) \- ((r5.mon_in_battle[0] \- 1) * 2)) + 44)) \/ 100)l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|lif (r6 != false) goto L33l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|lr5.exp = (short) (r5.exp \/ 2)l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|RETURN\lORIG_RETURN\l|lreturnl}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
MethodNode[shape=record,label="{private void main.GameRun.getExpOne((r5v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r6v0 'half' boolean A[D('half' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:12:0x0035 \-\> B:14:0x003e, BACK_EDGE: B:8:0x0073 \-\> B:2:0x0014, CROSS_EDGE: B:5:0x0062 \-\> B:8:0x0073\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_2;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_15;
}

