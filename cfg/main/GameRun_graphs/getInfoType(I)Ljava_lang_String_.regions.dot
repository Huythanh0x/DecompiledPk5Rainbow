digraph "CFG formain.GameRun.getInfoType(I)Ljava\/lang\/String;" {
subgraph cluster_Region_1460209766 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0001|RETURN\l|lreturn r2 == \-1 ? main.Constants_H.TXT_86 : r2 == \-2 ? \"进化\" : r2 == \-3 ? main.Constants_H.TXT_88 : r2 == \-4 ? main.Constants_H.TXT_89 : r2 == \-5 ? \"孵化\" : \"捕获\"l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0000|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0003|ORIG_RETURN\l|l}"];
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0006|l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0007|l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0009|SYNTHETIC\l|l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000c|l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000d|l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x000f|SYNTHETIC\l|l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0012|l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0013|l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0015|SYNTHETIC\l|l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0018|l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0019|l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x001b|SYNTHETIC\l|l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x001e|SYNTHETIC\l|l}"];
MethodNode[shape=record,label="{private java.lang.String main.GameRun.getInfoType((r1v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r2v0 'i' int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:7:0x0009 \-\> B:4:0x0005, CROSS_EDGE: B:10:0x000f \-\> B:4:0x0005, CROSS_EDGE: B:13:0x0015 \-\> B:4:0x0005, CROSS_EDGE: B:16:0x001b \-\> B:4:0x0005, CROSS_EDGE: B:17:0x001e \-\> B:4:0x0005\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_2 -> Node_5;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_4;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11;
Node_10 -> Node_4;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_4;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_4;
Node_17 -> Node_4;
}

