digraph "CFG formain.GameRun.getMagic(Ldm\/Monster;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lbyte[] r1 = new byte[]\{0, 7, 14, 21, 28, 35\}lr8.getSkill = \-1lr0 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x001f|LOOP_START\lPHI: r0l  0x001f: PHI (r0v1 'i' byte) = (r0v0 'i' byte), (r0v2 'i' byte) binds: [B:1:0x0000, B:10:0x0042] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x001f\-\>B:10:0x0042\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x0020|lif (r0 \< r1.length) goto L22l}"];
Node_4 [shape=record,label="{4\:\ 0x0023|l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|lif (r9.monster[r0 + 8] != (\-1)) goto L30l}"];
Node_6 [shape=record,label="{6\:\ 0x002b|l}"];
Node_7 [shape=record,label="{7\:\ 0x0031|lif (r9.monster[2] \< r1[r0]) goto L31l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|lgetSkill(r0, r9.monster[3])lr9.monster[r0 + 8] = r8.getSkilll}"];
Node_9 [shape=record,label="{9\:\ 0x0042|SYNTHETIC\l|l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|LOOP_END\lLOOP:0: B:2:0x001f\-\>B:10:0x0042\l|lbyte r0 = (byte) (r0 + 1)l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|SYNTHETIC\l|l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|SYNTHETIC\l|l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|SYNTHETIC\l|l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|RETURN\l|lreturnl}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{public void main.GameRun.getMagic((r8v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r9v0 'monster' dm.Monster A[D('monster' dm.Monster), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:10:0x0042 \-\> B:2:0x001f, CROSS_EDGE: B:7:0x0031 \-\> B:10:0x0042, CROSS_EDGE: B:5:0x0029 \-\> B:10:0x0042\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_2;
Node_11 -> Node_10;
Node_12 -> Node_10;
Node_13 -> Node_14;
Node_14 -> Node_15;
}

