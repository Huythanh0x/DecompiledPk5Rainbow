digraph "CFG formain.GameRun.getMonster(Ldm\/Monster;IZ)B" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x000a|lif (r4.monInfoList[r5.monster[0]] == 2) goto L26l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|lr4.monInfoList[r5.monster[0]] = 2laddMonInfoListBH()lr4.map.addAnole(r5.monster[0])l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|lif (r4.myMon_length \>= r4.max_takes) goto L33l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|lr4.myMonsters[r4.myMon_length] = r5l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|lif (r7 == false) goto L31l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|lr4.myMonsters[r4.myMon_length].resetMonster(r4, r6)l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|lr4.myMon_length = (byte) (r4.myMon_length + 1)l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|RETURN\lORIG_RETURN\l|lreturn 0l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|lif (r4.cMon_count \>= r4.max_monsters) goto L39l}"];
Node_14 [shape=record,label="{14\:\ 0x0046|lsay(new java.lang.StringBuilder(main.Constants_H.TXT_50).append(getNameMon(r5.monster[0])).append(main.Constants_H.TXT_51).toString(), 0)lr4.cMonsters[r4.cMon_count] = r5l}"];
Node_15 [shape=record,label="{15\:\ 0x006c|lif (r7 == false) goto L38l}"];
Node_16 [shape=record,label="{16\:\ 0x006e|lr4.cMonsters[r4.cMon_count].resetMonster(r4, r6)l}"];
Node_17 [shape=record,label="{17\:\ 0x0077|lr4.cMon_count = (byte) (r4.cMon_count + 1)l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|lreturn 1l}"];
Node_19 [shape=record,label="{19\:\ 0x0080|SYNTHETIC\lRETURN\l|lreturn \-1l}"];
MethodNode[shape=record,label="{private byte main.GameRun.getMonster((r4v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r5v0 'monster' dm.Monster A[D('monster' dm.Monster), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'evolve' int A[D('evolve' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'bb' boolean A[D('bb' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:7:0x002c \-\> B:9:0x0037, CROSS_EDGE: B:17:0x0077 \-\> B:10:0x003f, CROSS_EDGE: B:15:0x006c \-\> B:17:0x0077, CROSS_EDGE: B:19:0x0080 \-\> B:10:0x003f, CROSS_EDGE: B:2:0x000a \-\> B:4:0x0020\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

