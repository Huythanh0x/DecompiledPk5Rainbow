digraph "CFG formain.GameRun.goBattle()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lr8.first_battle = 0lr8.lastSkill = 0lr8.b_c = 0lr8.cur_a = 0lr8.mon_in_battle = nulllr8.mon_in_battle = new byte[r8.max_takes + 1]lr8.levelUp_in_battle = nulllint[] r1 = new int[]\{r8.max_takes, 2\}lr8.levelUp_in_battle = (byte[][]) java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, r1)lr8.proReplace = nulllint[] r1 = new int[]\{r8.myMonsters.length, 7\}lr8.proReplace = (short[][]) java.lang.reflect.Array.newInstance(java.lang.Short.TYPE, r1)lr8.myB = new dm.Battle(r8.myMonsters)lenemy_init()lr0 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x0049|LOOP_START\lPHI: r0l  0x0049: PHI (r0v1 'i' byte A[IMMUTABLE_TYPE]) = (r0v0 'i' byte), (r0v5 'i' byte) binds: [B:1:0x0000, B:4:0x0088] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0049\-\>B:4:0x0088\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x004b|lif (r0 \< r8.myMon_length) goto L42l}"];
Node_4 [shape=record,label="{4\:\ 0x0088|LOOP_END\lLOOP:0: B:2:0x0049\-\>B:4:0x0088\l|lr8.myMonsters[r0].effect = 7lr8.myMonsters[r0].effect_time = 0lr8.myMonsters[r0].monster[1] = r0lr8.proReplace[r0][6] = r8.myMonsters[r0].monster[2]lbyte r0 = (byte) (r0 + 1)l}"];
Node_5 [shape=record,label="{5\:\ 0x004d|SYNTHETIC\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x004d|lr0 = 0l}"];
Node_7 [shape=record,label="{7\:\ 0x004e|LOOP_START\lPHI: r0l  0x004e: PHI (r0v3 'i' byte) = (r0v2 'i' byte), (r0v4 'i' byte) binds: [B:6:0x004d, B:11:0x00dd] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x004e\-\>B:11:0x00dd\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x0050|lif (r0 \< r8.myMon_length) goto L43l}"];
Node_9 [shape=record,label="{9\:\ 0x00af|l}"];
Node_10 [shape=record,label="{10\:\ 0x00b7|lif (r8.myMonsters[r0].monsterPro[0] \<= 0) goto L48l}"];
Node_11 [shape=record,label="{11\:\ 0x00dd|LOOP_END\lLOOP:1: B:7:0x004e\-\>B:11:0x00dd\l|lbyte r0 = (byte) (r0 + 1)l}"];
Node_12 [shape=record,label="{12\:\ 0x00b9|SYNTHETIC\l|l}"];
Node_13 [shape=record,label="{13\:\ 0x00b9|lbyte[] r1 = r8.mon_in_battlelbyte[] r2 = r8.mon_in_battlelbyte r3 = (byte) (r2[0] + 1)lr2[0] = r3lr1[r3] = r8.myMonsters[r0].monster[1]l}"];
Node_14 [shape=record,label="{14\:\ 0x00ce|lif (r0 == 0) goto L34l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|l}"];
Node_16 [shape=record,label="{16\:\ 0x0054|lif (r8.effectImage != null) goto L37l}"];
Node_17 [shape=record,label="{17\:\ 0x0056|lr8.effectImage = dm.Ms.i().createImageArray(7, \"data\/brow\/e\")l}"];
Node_18 [shape=record,label="{18\:\ 0x0062|l}"];
Node_19 [shape=record,label="{19\:\ 0x0064|lif (r8.imgBattle != null) goto L40l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|lr8.imgBattle = dm.Ms.i().createImageArray(5, \"data\/battle\/b\")l}"];
Node_21 [shape=record,label="{21\:\ 0x0073|lr8.map.my.state = 15lmain.GameRun.run_state = \-30lr8.view_state = \-1lmain.CreateThread new main.CreateThread(r8, 1)l}"];
Node_22 [shape=record,label="{22\:\ 0x0087|RETURN\l|lreturnl}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_24 [shape=record,label="{24\:\ 0x00d0|lchangeMonster(r8.myMonsters[r0], r8.myMonsters[0])l}"];
Node_25 [shape=record,label="{25\:\ 0x0052|SYNTHETIC\l|l}"];
MethodNode[shape=record,label="{public void main.GameRun.goBattle((r8v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:19:0x0064 \-\> B:21:0x0073, CROSS_EDGE: B:16:0x0054 \-\> B:18:0x0062, CROSS_EDGE: B:14:0x00ce \-\> B:15:0x0052, CROSS_EDGE: B:24:0x00d0 \-\> B:15:0x0052, BACK_EDGE: B:11:0x00dd \-\> B:7:0x004e, BACK_EDGE: B:4:0x0088 \-\> B:2:0x0049\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_25[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_7;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_24[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_15;
Node_25 -> Node_15;
}

