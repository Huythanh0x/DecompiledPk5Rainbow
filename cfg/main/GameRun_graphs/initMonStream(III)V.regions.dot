digraph "CFG formain.GameRun.initMonStream(III)V" {
subgraph cluster_Region_1369523986 {
label = "R(3:1|2|(1:9)(1:6))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|ljava.lang.String java.lang.String r1 = \"data\/npc\" + r5 + \"\/\" + r6l}"];
Node_2 [shape=record,label="{2\:\ 0x001b|lboolean r0 = r5 == 2 ? isNpc2ImageType(r6) : truel}"];
subgraph cluster_IfRegion_1599003719 {
label = "IF [B:5:0x0025] THEN: R(1:9) ELSE: R(1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0025|lif (r4.mon[r7] != null) goto L20l}"];
subgraph cluster_Region_1554382666 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0034|ldm.Ms.i().setSprite(r4.mon[r7], r1, r0)l}"];
}
subgraph cluster_Region_928391425 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0027|lr4.mon[r7] = dm.Ms.i().createSprite(r1, r0)l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x001d|l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0021|PHI: r0l  0x0021: PHI (r0 I:??) = (r0v2 'bb' boolean) binds: [B:3:0x001d] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0033|ORIG_RETURN\l|l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l|l}"];
MethodNode[shape=record,label="{public void main.GameRun.initMonStream((r4v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]), (r5v0 'type' int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'id' int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'i' int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:9:0x0034 \-\> B:7:0x0033, CROSS_EDGE: B:2:0x001b \-\> B:4:0x0021\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_4;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_9 -> Node_10;
Node_6 -> Node_7;
Node_0 -> Node_1;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_7 -> Node_8;
Node_10 -> Node_8;
}

