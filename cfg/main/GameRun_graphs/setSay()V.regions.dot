digraph "CFG formain.GameRun.setSay()V" {
subgraph cluster_Region_1653698726 {
label = "R(1:(1:(2:5|(2:(2:7|8)|(1:(1:11)(1:(1:(1:14))))))))";
node [shape=record,color=blue];
subgraph cluster_Region_1539459633 {
label = "R(1:(2:5|(2:(2:7|8)|(1:(1:11)(1:(1:(1:14)))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_78662360 {
label = "IF [B:2:0x0007, B:4:0x000f] THEN: R(2:5|(2:(2:7|8)|(1:(1:11)(1:(1:(1:14)))))) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0007|lif (r9.say_c == 0) goto L23l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|ADDED_TO_REGION\l|lif (r9.sayStr.size() != 0) goto L26l}"];
subgraph cluster_Region_1782116580 {
label = "R(2:5|(2:(2:7|8)|(1:(1:11)(1:(1:(1:14))))))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|ljava.lang.String java.lang.String r1 = r9.sayStr.remove(0)lint int r0 = r9.sayFlag.remove(0).intValue()lr9.showS = dm.Ms.i().groupString(r1, main.Constants_H.WIDTH \- 50)lr9.say_s = main.Constants_H.WIDTHlr9.say_mode = (byte) 0l}"];
subgraph cluster_Region_1031289304 {
label = "R(2:(2:7|8)|(1:(1:11)(1:(1:(1:14)))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_90223768 {
label = "IF [B:6:0x003b] THEN: R(2:7|8) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x003b|lif (r0 == 0) goto L28l}"];
subgraph cluster_Region_1409645201 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x003d|lr9.say_c = (byte) 15l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
}
}
subgraph cluster_Region_492777954 {
label = "R(1:(1:11)(1:(1:(1:14)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_622870423 {
label = "IF [B:10:0x0040] THEN: R(1:11) ELSE: R(1:(1:(1:14))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0040|lif (r0 == (\-1)) goto L30l}"];
subgraph cluster_Region_465526299 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0042|lr9.say_c = (byte) \-1l}"];
}
subgraph cluster_Region_1735725645 {
label = "R(1:(1:(1:14))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_Region_408632768 {
label = "R(1:(1:14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_499787492 {
label = "IF [B:13:0x0045] THEN: R(1:14) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0045|lif (r0 == 1) goto L32l}"];
subgraph cluster_Region_2087706376 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0047|lr9.say_c = (byte) 15lr9.say_mode = (byte) 1l}"];
}
}
}
}
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0000|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0009|l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\l|l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l|l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|SYNTHETIC\l|l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|SYNTHETIC\l|l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0011|RETURN\lORIG_RETURN\lADDED_TO_REGION\l|lreturnl}"];
MethodNode[shape=record,label="{public void main.GameRun.setSay((r9v0 'this' main.GameRun A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:7:0x003d \-\> B:18:0x0011, CROSS_EDGE: B:11:0x0042 \-\> B:18:0x0011, CROSS_EDGE: B:13:0x0045 \-\> B:18:0x0011, CROSS_EDGE: B:14:0x0047 \-\> B:18:0x0011, CROSS_EDGE: B:2:0x0007 \-\> B:18:0x0011\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_2 -> Node_18[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_17[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_10[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_12 -> Node_9;
Node_15 -> Node_9;
Node_16 -> Node_9;
Node_17 -> Node_9;
Node_18 -> Node_9;
}

