digraph "CFG formain.MD5.str2blks_MD5(Ljava\/lang\/String;)[I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lint r2 = ((r8.length() + 8) \>\> 6) + 1lint[] r0 = new int[r2 * 16]lr1 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x0010|LOOP_START\lPHI: r1l  0x0010: PHI (r1v2 'i' int) = (r1v1 'i' int), (r1v6 'i' int) binds: [B:1:0x0000, B:4:0x0036] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0010\-\>B:4:0x0036\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|lif (r1 \< (r2 * 16)) goto L10l}"];
Node_4 [shape=record,label="{4\:\ 0x0036|LOOP_END\lLOOP:0: B:2:0x0010\-\>B:4:0x0036\l|lr0[r1] = 0lint r1 = r1 + 1l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|SYNTHETIC\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|lr1 = 0l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|LOOP_START\lPHI: r1l  0x0015: PHI (r1v4 'i' int) = (r1v3 'i' int), (r1v5 'i' int) binds: [B:6:0x0014, B:9:0x003c] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0015\-\>B:9:0x003c\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|lif (r1 \< r8.length()) goto L11l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|LOOP_END\lLOOP:1: B:7:0x0015\-\>B:9:0x003c\l|lint r3 = r1 \>\> 2lr0[r3] = r0[r3] \| (r8.charAt(r1) \<\< ((r1 % 4) * 8))lint r1 = r1 + 1l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|SYNTHETIC\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|lint r3 = r1 \>\> 2lr0[r3] = r0[r3] \| (128 \<\< ((r1 % 4) * 8))lr0[(r2 * 16) \- 2] = r8.length() * 8l}"];
Node_12 [shape=record,label="{12\:\ 0x0035|RETURN\l|lreturn r0l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{private int[] main.MD5.str2blks_MD5((r7v0 'this' main.MD5 A[IMMUTABLE_TYPE, THIS]), (r8v0 'str' java.lang.String A[D('str' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lBACK_EDGE: B:9:0x003c \-\> B:7:0x0015, BACK_EDGE: B:4:0x0036 \-\> B:2:0x0010\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

