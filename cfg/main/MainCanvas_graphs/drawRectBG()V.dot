digraph "CFG formain.MainCanvas.drawRectBG()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|ldm.Ui.i().fillRectB()lint[] r1 = new int[]\{0, 10, 20, 10\}lint[] r3 = new int[]\{10, 0, 10, 20\}lr10 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x0027|LOOP_START\lPHI: r10l  0x0027: PHI (r10v1 'j' byte) = (r10v0 'j' byte), (r10v2 'j' byte) binds: [B:1:0x0000, B:9:0x003b] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0027\-\>B:9:0x003b\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|lif (r10 \< ((main.Constants_H.HEIGHT_ \/ 20) + 1)) goto L21l}"];
Node_4 [shape=record,label="{4\:\ 0x0034|lr9 = 0l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|LOOP_START\lPHI: r9l  0x0035: PHI (r9v1 'i' byte) = (r9v0 'i' byte), (r9v2 'i' byte) binds: [B:4:0x0034, B:7:0x003f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x0035\-\>B:7:0x003f\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x0039|lif (r9 \< ((main.Constants_H.WIDTH_ \/ 20) + 1)) goto L25l}"];
Node_7 [shape=record,label="{7\:\ 0x003f|LOOP_END\lLOOP:1: B:5:0x0035\-\>B:7:0x003f\l|lmain.MainCanvas.g.translate(r9 * 20, r10 * 20)lmain.MainCanvas.dg.fillPolygon(r1, 0, r3, 0, 4, \-11548673)lmain.MainCanvas.g.translate(r9 * main.Constants_H.SMS_PAUSE, r10 * main.Constants_H.SMS_PAUSE)lbyte r9 = (byte) (r9 + 1)l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|SYNTHETIC\l|l}"];
Node_9 [shape=record,label="{9\:\ 0x003b|LOOP_END\lLOOP:0: B:2:0x0027\-\>B:9:0x003b\l|lbyte r10 = (byte) (r10 + 1)l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|SYNTHETIC\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|lint[] r1 = (int[]) nulllint[] r3 = (int[]) nulll}"];
Node_12 [shape=record,label="{12\:\ 0x0033|RETURN\l|lreturnl}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{public void main.MainCanvas.drawRectBG((r12v0 'this' main.MainCanvas A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:9:0x003b \-\> B:2:0x0027, BACK_EDGE: B:7:0x003f \-\> B:5:0x0035\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_5;
Node_8 -> Node_9;
Node_9 -> Node_2;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

