digraph "CFG formain.Map.addAnole(I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x0008|lif (r6 == 13) goto L31l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|lif (r6 == 34) goto L31l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|lif (r6 == 49) goto L31l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|lif (r6 == 66) goto L31l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|lif (r6 == 82) goto L31l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|RETURN\lORIG_RETURN\l|lreturnl}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|lif (r6 != 13) goto L34l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|lr6 = 0l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|PHI: r6l  0x0018: PHI (r6v5 'i' int) = (r6v1 'i' int), (r6v2 'i' int), (r6v3 'i' int), (r6v4 'i' int), (r6v6 'i' int) binds: [B:20:0x0032, B:19:0x0030, B:17:0x002c, B:15:0x0028, B:11:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|lbyte[] r0 = r5.gr.rmsOtherlr0[2] = (byte) (r0[2] \| (1 \<\< r6))l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
Node_14 [shape=record,label="{14\:\ 0x0026|lif (r6 != 34) goto L36l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|lr6 = 1l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|lif (r6 != 49) goto L38l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|lr6 = 2l}"];
Node_18 [shape=record,label="{18\:\ 0x002e|lif (r6 != 66) goto L40l}"];
Node_19 [shape=record,label="{19\:\ 0x0030|lr6 = 3l}"];
Node_20 [shape=record,label="{20\:\ 0x0032|lr6 = 4l}"];
MethodNode[shape=record,label="{public void main.Map.addAnole((r5v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]), (r6v0 'i' int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:12:0x0018 \-\> B:8:0x0014, CROSS_EDGE: B:15:0x0028 \-\> B:12:0x0018, CROSS_EDGE: B:17:0x002c \-\> B:12:0x0018, CROSS_EDGE: B:19:0x0030 \-\> B:12:0x0018, CROSS_EDGE: B:20:0x0032 \-\> B:12:0x0018, CROSS_EDGE: B:5:0x000e \-\> B:10:0x0015, CROSS_EDGE: B:4:0x000c \-\> B:10:0x0015, CROSS_EDGE: B:3:0x000a \-\> B:10:0x0015, CROSS_EDGE: B:2:0x0008 \-\> B:10:0x0015\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_12;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_12;
Node_20 -> Node_12;
}

