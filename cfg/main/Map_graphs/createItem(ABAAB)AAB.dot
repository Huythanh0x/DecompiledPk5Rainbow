digraph "CFG formain.Map.createItem([B[[B)[[B" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lbyte[][] r7 = (byte[][]) nulll}"];
Node_2 [shape=record,label="{2\:\ 0x000b|lif (r5.mapInfo[r5.mapNo * 2] \<= 0) goto L38l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|lbyte[] r6 = r5.mapTemp[r5.mapNo]ldm.Ms.i()lint r2 = dm.Ms.skip2ldm.Ms.skip2 = r2 + 1lbyte[][] r7 = new byte[r6[r2]]lr0 = 0l}"];
Node_4 [shape=record,label="{4\:\ 0x0021|LOOP_START\lPHI: r0l  0x0021: PHI (r0v4 'i' int) = (r0v3 'i' int), (r0v5 'i' int) binds: [B:3:0x000d, B:11:0x003a] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:4:0x0021\-\>B:11:0x003a\l|l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|lif (r0 \< r7.length) goto L33l}"];
Node_6 [shape=record,label="{6\:\ 0x0025|ldm.Ms.i()lint r2 = dm.Ms.skip2ldm.Ms.skip2 = r2 + 1lr7[r0] = new byte[r6[r2]]lr1 = 0l}"];
Node_7 [shape=record,label="{7\:\ 0x0035|LOOP_START\lPHI: r1l  0x0035: PHI (r1v4 'j' int) = (r1v3 'j' int), (r1v5 'j' int) binds: [B:6:0x0025, B:9:0x003d] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0035\-\>B:9:0x003d\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|lif (r1 \< r7[r0].length) goto L37l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|LOOP_END\lLOOP:1: B:7:0x0035\-\>B:9:0x003d\l|lbyte[] r2 = r7[r0]ldm.Ms.i()lint r3 = dm.Ms.skip2ldm.Ms.skip2 = r3 + 1lr2[r1] = r6[r3]lint r1 = r1 + 1l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|SYNTHETIC\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|LOOP_END\lLOOP:0: B:4:0x0021\-\>B:11:0x003a\l|lint r0 = r0 + 1l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|SYNTHETIC\l|l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|RETURN\lPHI: r7l  0x0024: PHI (r7v4 byte[][]) = (r7v3 byte[][]), (r7v5 byte[][]) binds: [B:24:0x0024, B:12:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|lreturn r7l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_15 [shape=record,label="{15\:\ 0x004f|ldm.Ms.i()lint r2 = dm.Ms.skipldm.Ms.skip = r2 + 1lbyte[][] r7 = new byte[r6[r2]]lr0 = 0l}"];
Node_16 [shape=record,label="{16\:\ 0x005d|LOOP_START\lPHI: r0l  0x005d: PHI (r0v1 'i' int) = (r0v0 'i' int), (r0v2 'i' int) binds: [B:15:0x004f, B:23:0x0075] A[DONT_GENERATE, DONT_INLINE]\lLOOP:2: B:16:0x005d\-\>B:23:0x0075\l|l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|lif (r0 \>= r7.length) goto L48l}"];
Node_18 [shape=record,label="{18\:\ 0x0060|ldm.Ms.i()lint r2 = dm.Ms.skipldm.Ms.skip = r2 + 1lr7[r0] = new byte[r6[r2]]lr1 = 0l}"];
Node_19 [shape=record,label="{19\:\ 0x0070|LOOP_START\lPHI: r1l  0x0070: PHI (r1v1 'j' int) = (r1v0 'j' int), (r1v2 'j' int) binds: [B:18:0x0060, B:21:0x0078] A[DONT_GENERATE, DONT_INLINE]\lLOOP:3: B:19:0x0070\-\>B:21:0x0078\l|l}"];
Node_20 [shape=record,label="{20\:\ 0x0073|lif (r1 \< r7[r0].length) goto L45l}"];
Node_21 [shape=record,label="{21\:\ 0x0078|LOOP_END\lLOOP:3: B:19:0x0070\-\>B:21:0x0078\l|lbyte[] r2 = r7[r0]ldm.Ms.i()lint r3 = dm.Ms.skipldm.Ms.skip = r3 + 1lr2[r1] = r6[r3]lint r1 = r1 + 1l}"];
Node_22 [shape=record,label="{22\:\ 0x0075|SYNTHETIC\l|l}"];
Node_23 [shape=record,label="{23\:\ 0x0075|LOOP_END\lLOOP:2: B:16:0x005d\-\>B:23:0x0075\l|lint r0 = r0 + 1l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|SYNTHETIC\l|l}"];
MethodNode[shape=record,label="{byte[][] main.Map.createItem((r5v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]), (r6v0 byte[] A[D('data' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'npc' byte[][] A[D('npc' byte[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lBACK_EDGE: B:11:0x003a \-\> B:4:0x0021, BACK_EDGE: B:9:0x003d \-\> B:7:0x0035, CROSS_EDGE: B:17:0x005e \-\> B:13:0x0024, BACK_EDGE: B:23:0x0075 \-\> B:16:0x005d, BACK_EDGE: B:21:0x0078 \-\> B:19:0x0070\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_15;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_12[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_4;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_22[style=dashed];
Node_21 -> Node_19;
Node_22 -> Node_23;
Node_23 -> Node_16;
Node_24 -> Node_13;
}

