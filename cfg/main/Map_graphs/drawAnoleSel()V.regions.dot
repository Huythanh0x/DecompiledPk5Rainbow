digraph "CFG formain.Map.drawAnoleSel()V" {
subgraph cluster_Region_923301710 {
label = "R(6:1|(4:(2:20|(1:22)(1:26))(1:6)|7|(1:(1:11)(1:14))(0)|13)|(1:32)(1:42)|33|(1:35)|36) | DECL_VAR: byte j, byte c, byte j\l";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lr19.gr.cur_a = (byte) dm.Ms.i().mathSpeedN(r19.gr.cur_a, (25 * 2) + 12, 8, false)ldm.Ui.i().drawK1(0, (main.Constants_H.HEIGHT \- r19.gr.cur_a) \- 2, 119, 25 + 4 + 2, 2)ldm.Ui.i().drawK2(0, ((main.Constants_H.HEIGHT + 25) + 4) \- r19.gr.cur_a, main.Constants_H.WIDTH, 25 + 8, 0)lbyte r18 = 0l}"];
subgraph cluster_LoopRegion_1954132077 {
label = "LOOP:0: (4:(2:20|(1:22)(1:26))(1:6)|7|(1:(1:11)(1:14))(0)|13)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x005c|ADDED_TO_REGION\l|lif (r18 \< 5) goto L57l}"];
subgraph cluster_Region_1061148155 {
label = "R(4:(2:20|(1:22)(1:26))(1:6)|7|(1:(1:11)(1:14))(0)|13)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_73593240 {
label = "IF [B:5:0x0114] THEN: R(2:20|(1:22)(1:26)) ELSE: R(1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0114|lif (isAnoleType(r18) == true) goto L66l}"];
subgraph cluster_Region_1889817693 {
label = "R(2:20|(1:22)(1:26))";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x01a9|PHI: r2l  0x01a9: PHI (r2v25 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|lbyte r7 = (byte) (r18 == r19.anoleSel ? 1 : 0)l}"];
subgraph cluster_IfRegion_838195135 {
label = "IF [B:21:0x01b2] THEN: R(1:22) ELSE: R(1:26)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x01b2|lif (r18 == r19.anole_type) goto L71l}"];
subgraph cluster_Region_648725546 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x01b4|lr9 = main.Constants_H.MINI_GAMEl}"];
}
subgraph cluster_Region_137818932 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x01c6|PHI: r2l  0x01c6: PHI (r2v29 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|lbyte r9 = (byte) (r18 == r19.anoleSel ? r18 + 5 : r18)l}"];
}
}
}
subgraph cluster_Region_457911707 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0116|lr7 = 6lbyte r9 = (byte) (r18 + 70)l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x011a|PHI: r7 r9l  0x011a: PHI (r7v8 'c' byte) = (r7v7 'c' byte), (r7v7 'c' byte), (r7v9 'c' byte) binds: [B:26:0x01c6, B:22:0x01b4, B:6:0x0116] A[DONT_GENERATE, DONT_INLINE]l  0x011a: PHI (r9v5 'j' byte) = (r9v3 'j' byte), (r9v4 'j' byte), (r9v6 'j' byte) binds: [B:26:0x01c6, B:22:0x01b4, B:6:0x0116] A[DONT_GENERATE, DONT_INLINE]\l|ldm.Ui.i().drawK0(((main.Constants_H.WIDTH * r18) \/ 6) + 42, ((main.Constants_H.HEIGHT + 25) + 8) \- r19.gr.cur_a, 20, 20, r7)ldm.Ui.i().drawUi(r9, ((main.Constants_H.WIDTH * r18) \/ 6) + 42 + 10, (((main.Constants_H.HEIGHT + 25) + 8) \- r19.gr.cur_a) + 18, 33, 0)l}"];
subgraph cluster_IfRegion_1235190803 {
label = "IF [B:8:0x0182] THEN: R(1:(1:11)(1:14)) ELSE: R(0)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0182|lif (r19.pkey.isSelect(((main.Constants_H.WIDTH * r18) \/ 6) + 42, ((main.Constants_H.HEIGHT + 25) + 8) \- r19.gr.cur_a, 20, 20) != false) goto L62l}"];
subgraph cluster_Region_1449474759 {
label = "R(1:(1:11)(1:14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1447619248 {
label = "IF [B:10:0x018c] THEN: R(1:11) ELSE: R(1:14)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x018c|lif (r19.anoleSel == r18) goto L64l}"];
subgraph cluster_Region_547934474 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x018e|lr19.pkey.setKeySoftkey1()l}"];
}
subgraph cluster_Region_1767377950 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x01cc|lr19.anoleSel = r18l}"];
}
}
}
subgraph cluster_Region_1579718138 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_13 [shape=record,label="{13\:\ 0x0196|LOOP_END\lLOOP:0: B:2:0x0058\-\>B:13:0x0196\l|lr18 = (byte) (r18 + 1)l}"];
}
}
subgraph cluster_IfRegion_356747261 {
label = "IF [B:31:0x0068] THEN: R(1:32) ELSE: R(1:42)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0068|lif (r19.anoleSel == r19.anole_type) goto L51l}"];
subgraph cluster_Region_515335459 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x006a|lr9 = 0l}"];
}
subgraph cluster_Region_733860699 {
label = "R(1:42)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x01e8|PHI: r2l  0x01e8: PHI (r2v8 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|lbyte r9 = (byte) (isAnoleType(r19.anoleSel) ? r19.anoleSel + 1 : 6)l}"];
}
}
Node_33 [shape=record,label="{33\:\ 0x006b|PHI: r9l  0x006b: PHI (r9v1 'j' byte) = (r9v0 'j' byte), (r9v2 'j' byte) binds: [B:42:0x01e8, B:32:0x006a] A[DONT_GENERATE, DONT_INLINE]\l|landroid.util.Log.e(\"sk\", \"drawAnoleSel\")ldm.Ui.i().drawString(r19.gr.about_a[r9].toString(), 60, (main.Constants_H.HEIGHT \- r19.gr.cur_a) \- 2, 17, 1, 2)ldm.Ui.i().drawK4(((r19.anoleSel * main.Constants_H.WIDTH) \/ 6) + 41 + (r19.gr.cur_b \/ 3), (((main.Constants_H.HEIGHT + 25) + 7) \- r19.gr.cur_a) + (r19.gr.cur_b \/ 3), 22 \- ((r19.gr.cur_b \/ 3) \<\< 1), 22 \- ((r19.gr.cur_b \/ 3) \<\< 1))lmain.GameRun main.GameRun r0 = r19.grlbyte byte r3 = r0.cur_blr0.cur_b = (byte) (r3 + 1)l}"];
subgraph cluster_IfRegion_255529263 {
label = "IF [B:34:0x00f8] THEN: R(1:35) ELSE: null";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x00f8|lif (r3 \> 4) goto L54l}"];
subgraph cluster_Region_1779381392 {
label = "R(1:35)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x00fa|lr19.gr.cur_b = (byte) 0l}"];
}
}
Node_36 [shape=record,label="{36\:\ 0x0102|ldm.Ui.i().drawYesNo_(false, true)l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0058|LOOP_START\lPHI: r18l  0x0058: PHI (r18v1 'i' byte) = (r18v0 'i' byte), (r18v2 'i' byte) binds: [B:1:0x0000, B:13:0x0196] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0058\-\>B:13:0x0196\l|l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x010c|l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0184|l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0196|SYNTHETIC\l|l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0196|SYNTHETIC\l|l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0196|SYNTHETIC\l|l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x019e|l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x01a6|l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x01a8|l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x01ba|l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x01c2|l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x01c4|l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x01c9|l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x01b8|l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x005e|SYNTHETIC\l|l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x005e|l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x010b|l}"];
Node_38 [shape=record,color=red,label="{38\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x01d3|l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x01df|l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x01e1|l}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x01eb|l}"];
MethodNode[shape=record,label="{private void main.Map.drawAnoleSel((r19v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:34:0x00f8 \-\> B:36:0x0102, CROSS_EDGE: B:42:0x01e8 \-\> B:33:0x006b, CROSS_EDGE: B:43:0x01eb \-\> B:42:0x01e8, BACK_EDGE: B:13:0x0196 \-\> B:2:0x0058, CROSS_EDGE: B:14:0x01cc \-\> B:13:0x0196, CROSS_EDGE: B:8:0x0182 \-\> B:13:0x0196, CROSS_EDGE: B:22:0x01b4 \-\> B:7:0x011a, CROSS_EDGE: B:26:0x01c6 \-\> B:7:0x011a, CROSS_EDGE: B:27:0x01c9 \-\> B:26:0x01c6, CROSS_EDGE: B:28:0x01b8 \-\> B:20:0x01a9\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_29[style=dashed];
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_23[style=dashed];
Node_22 -> Node_7;
Node_26 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_16[style=dashed];
Node_10 -> Node_11;
Node_10 -> Node_14[style=dashed];
Node_11 -> Node_12;
Node_14 -> Node_15;
Node_13 -> Node_2;
Node_31 -> Node_32;
Node_31 -> Node_39[style=dashed];
Node_32 -> Node_33;
Node_42 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_34 -> Node_36[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_15 -> Node_13;
Node_16 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_28;
Node_19 -> Node_20;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_27 -> Node_26;
Node_28 -> Node_20;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_43 -> Node_42;
}

