digraph "CFG formain.Map.initCloud()V" {
subgraph cluster_Region_650733550 {
label = "R(1:(2:(4:(1:16)|17|(1:20)|22)|(1:11)))";
node [shape=record,color=blue];
subgraph cluster_Region_1331956598 {
label = "R(2:(4:(1:16)|17|(1:20)|22)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_665018370 {
label = "IF [B:2:0x0005, B:4:0x000b, B:6:0x0011, B:8:0x0017, B:10:0x001d] THEN: R(4:(1:16)|17|(1:20)|22) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|lif (r4.mapNo == 24) goto L35l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|ADDED_TO_REGION\l|lif (r4.mapNo == 25) goto L35l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|ADDED_TO_REGION\l|lif (r4.mapNo == 26) goto L35l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|ADDED_TO_REGION\l|lif (r4.mapNo == 49) goto L35l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|ADDED_TO_REGION\l|lif (r4.mapNo == 50) goto L35l}"];
subgraph cluster_Region_2080927112 {
label = "R(4:(1:16)|17|(1:20)|22)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1564260636 {
label = "IF [B:15:0x0021] THEN: R(1:16) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0021|lif (r4.imgCloud == null) goto L37l}"];
subgraph cluster_Region_807879490 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0023|lr4.imgCloud = dm.Ms.i().createImage(\"data\/cloud\")lr4.cloud = nulllr4.cloud = (short[][]) java.lang.reflect.Array.newInstance((java.lang.Class\<?\>) java.lang.Short.TYPE, 4, 3)l}"];
}
}
Node_17 [shape=record,label="{17\:\ 0x0041|lbyte r0 = 0l}"];
subgraph cluster_LoopRegion_197254631 {
label = "LOOP:0: (1:20)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0045|ADDED_TO_REGION\l|lif (r0 \< r4.cloud.length) goto L42l}"];
subgraph cluster_Region_1466311728 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0048|LOOP_END\lLOOP:0: B:18:0x0042\-\>B:20:0x0048\l|laddCloud(r0)lbyte r0 = (byte) (r0 + 1)l}"];
}
}
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
}
}
subgraph cluster_Region_1601683851 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x004f|lr4.cloud = nulllr4.imgCloud = nulll}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0000|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d|l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0013|l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0019|l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0047|ORIG_RETURN\l|l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001f|l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0042|LOOP_START\lPHI: r0l  0x0042: PHI (r0v1 'i' byte) = (r0v0 'i' byte), (r0v2 'i' byte) binds: [B:17:0x0041, B:20:0x0048] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:18:0x0042\-\>B:20:0x0048\l|l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0047|SYNTHETIC\l|l}"];
MethodNode[shape=record,label="{private void main.Map.initCloud((r4v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:20:0x0048 \-\> B:18:0x0042, CROSS_EDGE: B:15:0x0021 \-\> B:17:0x0041, CROSS_EDGE: B:11:0x004f \-\> B:12:0x0047, CROSS_EDGE: B:8:0x0017 \-\> B:14:0x001f, CROSS_EDGE: B:6:0x0011 \-\> B:14:0x001f, CROSS_EDGE: B:4:0x000b \-\> B:14:0x001f, CROSS_EDGE: B:2:0x0005 \-\> B:14:0x001f\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_14;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_14;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_10 -> Node_14;
Node_10 -> Node_11[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21[style=dashed];
Node_20 -> Node_18;
Node_22 -> Node_13;
Node_11 -> Node_12;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_18 -> Node_19;
Node_21 -> Node_22;
}

