digraph "CFG formain.Map.initMap()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lr7.my.dir = 4lr7.srcNpcNo = \-1lr7.gr.loadRmsSms()lr7.gr.loadRmsNidus()lnotMeet(0, 0)lr7.mapInfo = dm.Ms.i().byteArrayToShortArray(dm.Ms.i().rmsOptions(13, null, 1))lr7.mapChange = dm.Ms.i().rmsOptions(1, null, 1)lr0 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x0037|LOOP_START\lPHI: r0l  0x0037: PHI (r0v1 'i' short) = (r0v0 'i' short), (r0v2 'i' short) binds: [B:1:0x0000, B:8:0x0092] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0037\-\>B:8:0x0092\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x003a|lif (r0 \< r7.mapChange.length) goto L21l}"];
Node_4 [shape=record,label="{4\:\ 0x007e|l}"];
Node_5 [shape=record,label="{5\:\ 0x0082|lif (r7.mapChange[r0] != 1) goto L27l}"];
Node_6 [shape=record,label="{6\:\ 0x0084|lr7.mapTemp[r0] = dm.Ms.i().rmsOptions(r0 + 14, null, 1)l}"];
Node_7 [shape=record,label="{7\:\ 0x0092|SYNTHETIC\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x0092|LOOP_END\lLOOP:0: B:2:0x0037\-\>B:8:0x0092\l|lshort r0 = (short) (r0 + 1)l}"];
Node_9 [shape=record,label="{9\:\ 0x0092|SYNTHETIC\l|l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|SYNTHETIC\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|ljava.lang.System.gc()lr7.gr.createOver = 33lcreateOther()lr7.gr.createOver = 35lcreateLayer()lr7.gr.createOver = main.Constants_H.f78lcreateEvent()lr7.gr.createOver = main.Constants_H.f33lcreateNpcString()lr7.gr.createOver = 40ldm.Ms.i().rmsOptions(1, null, 4)lr7.gr.initMonPro(r7.mapNo, true)linitMissionList()linitCloud()l}"];
Node_12 [shape=record,label="{12\:\ 0x007d|RETURN\l|lreturnl}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{public void main.Map.initMap((r7v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:8:0x0092 \-\> B:2:0x0037, CROSS_EDGE: B:5:0x0082 \-\> B:8:0x0092\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_2;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
}

