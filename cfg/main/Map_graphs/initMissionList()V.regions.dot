digraph "CFG formain.Map.initMissionList()V" {
subgraph cluster_Region_2030519297 {
label = "R(5:1|(1:3)(1:10)|4|(1:6)|7)";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lbyte[] byte[] r2 = dm.Ms.i().rmsOptions(7, null, 1)l}"];
subgraph cluster_IfRegion_531019957 {
label = "IF [B:2:0x000f] THEN: R(1:3) ELSE: R(1:10)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x000f|lif (r2[0] == (\-1)) goto L15l}"];
subgraph cluster_Region_1537517631 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0011|lr9.bMission = nulll}"];
}
subgraph cluster_Region_1646722853 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0043|lr9.bMission = r2l}"];
}
}
Node_4 [shape=record,label="{4\:\ 0x0013|l(byte[]) nulll}"];
subgraph cluster_IfRegion_1368644954 {
label = "IF [B:5:0x0019] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0019|lif (r9.bMission == null) goto L18l}"];
subgraph cluster_Region_805905786 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001b|lr9.bMission = new byte[20]l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0021|ldm.Ms.i()ldm.Ms.skip = 0lbyte[] byte[] r1 = dm.Ms.i().getStream(\"data\/mission0.t\", \-1)lr9.sMission = dm.Ms.i().createString2Array(r1)lr9.smissionLength = r9.sMission.length \- 1lr9.sMission = nulll}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0042|l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{private void main.Map.initMissionList((r9v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:5:0x0019 \-\> B:7:0x0021, CROSS_EDGE: B:10:0x0043 \-\> B:4:0x0013\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_2 -> Node_10[style=dashed];
Node_3 -> Node_4;
Node_10 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_8 -> Node_9;
}

