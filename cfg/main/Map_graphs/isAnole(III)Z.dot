digraph "CFG formain.Map.isAnole(III)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|lif (r8 != 0) goto L60l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|lr8 = 3l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|PHI: r8l  0x0006: PHI (r8v3 '_anole_type' int) = (r8v1 '_anole_type' int), (r8v2 '_anole_type' int), (r8v4 '_anole_type' int) binds: [B:40:0x0031, B:38:0x002d, B:3:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|lr0 = 0l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|lif ((r6 % 20) == 0) goto L51l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|lbyte r0 = (byte) (0 + 1)l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|PHI: r0l  0x000e: PHI (r0v1 'check_n' byte) = (r0v0 'check_n' byte), (r0v5 'check_n' byte) binds: [B:5:0x0009, B:6:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|lif ((r7 % 20) == 0) goto L54l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|lbyte r0 = (byte) (r0 + 1)l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|PHI: r0l  0x0015: PHI (r0v2 'check_n' byte) = (r0v1 'check_n' byte), (r0v4 'check_n' byte) binds: [B:8:0x0010, B:9:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|lbyte r0 = (byte) (1 \<\< r0)l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|lif (r0 != 4) goto L66l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|lif (r5.worldData[(r6 + 19) \/ 20][r7 \/ 20] != r8) goto L66l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|RETURN\lORIG_RETURN\l|lreturn truel}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|lif (r0 \<= 1) goto L77l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|lif ((r6 % 20) == 0) goto L72l}"];
Node_20 [shape=record,label="{20\:\ 0x003b|l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|lif (r5.worldData[(r6 + 19) \/ 20][(r7 + 19) \/ 20] != r8) goto L72l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|lreturn truel}"];
Node_24 [shape=record,label="{24\:\ 0x004d|l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|lif ((r7 % 20) == 0) goto L77l}"];
Node_26 [shape=record,label="{26\:\ 0x0051|l}"];
Node_27 [shape=record,label="{27\:\ 0x005b|lif (r5.worldData[r6 \/ 20][r7 \/ 20] != r8) goto L77l}"];
Node_28 [shape=record,label="{28\:\ 0x005d|l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|lreturn truel}"];
Node_30 [shape=record,label="{30\:\ 0x005f|l}"];
Node_31 [shape=record,label="{31\:\ 0x0069|lif (r5.worldData[r6 \/ 20][r7 \/ 20] != r8) goto L80l}"];
Node_32 [shape=record,label="{32\:\ 0x006b|l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|lreturn truel}"];
Node_34 [shape=record,label="{34\:\ 0x006d|l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|lreturn falsel}"];
Node_36 [shape=record,label="{36\:\ 0x002a|l}"];
Node_37 [shape=record,label="{37\:\ 0x002b|lif (r8 != 2) goto L63l}"];
Node_38 [shape=record,label="{38\:\ 0x002d|lr8 = 4l}"];
Node_39 [shape=record,label="{39\:\ 0x002f|lif (r8 != 4) goto L65l}"];
Node_40 [shape=record,label="{40\:\ 0x0031|lr8 = 2l}"];
Node_41 [shape=record,label="{41\:\ 0x0033|l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lRETURN\l|lreturn falsel}"];
MethodNode[shape=record,label="{private boolean main.Map.isAnole((r5v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]), (r6v0 '_x' int A[D('_x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 '_y' int A[D('_y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 '_anole_type' int A[D('_anole_type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:22:0x004b \-\> B:15:0x0029, CROSS_EDGE: B:28:0x005d \-\> B:15:0x0029, CROSS_EDGE: B:32:0x006b \-\> B:15:0x0029, CROSS_EDGE: B:34:0x006d \-\> B:15:0x0029, CROSS_EDGE: B:25:0x004f \-\> B:30:0x005f, CROSS_EDGE: B:19:0x0039 \-\> B:24:0x004d, CROSS_EDGE: B:17:0x0035 \-\> B:30:0x005f, CROSS_EDGE: B:11:0x0018 \-\> B:17:0x0035, CROSS_EDGE: B:8:0x0010 \-\> B:10:0x0015, CROSS_EDGE: B:5:0x0009 \-\> B:7:0x000e, CROSS_EDGE: B:38:0x002d \-\> B:4:0x0006, CROSS_EDGE: B:40:0x0031 \-\> B:4:0x0006, CROSS_EDGE: B:41:0x0033 \-\> B:15:0x0029\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_36;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_30;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_16;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_16;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_16;
Node_34 -> Node_35;
Node_35 -> Node_16;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_4;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_4;
Node_41 -> Node_42;
Node_42 -> Node_16;
}

