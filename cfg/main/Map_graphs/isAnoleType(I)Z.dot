digraph "CFG formain.Map.isAnoleType(I)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x000b|lif ((r3.gr.rmsOther[2] & (1 \<\< r4)) == 0) goto L14l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|RETURN\lORIG_RETURN\l|lreturn truel}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|SYNTHETIC\lRETURN\l|lreturn falsel}"];
MethodNode[shape=record,label="{private boolean main.Map.isAnoleType((r3v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]), (r4v0 'i' int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:6:0x000f \-\> B:4:0x000e\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_6 -> Node_5;
}

