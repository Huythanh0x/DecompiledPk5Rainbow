digraph "CFG formain.Map.isAuto_canMove(Ldm\/Npc;II)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|l}"];
Node_2 [shape=record,label="{2\:\ 0x000d|lif (checkWorld(r10.x, r10.y, r11, r12, false) == 1) goto L16l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|l}"];
Node_4 [shape=record,label="{4\:\ 0x002d|lif (dm.Ms.i().isRect(r10.x + r11, r10.y + r12, 19, 19, r9.my.x, r9.my.y, 19, 19) == false) goto L18l}"];
Node_5 [shape=record,label="{5\:\ 0x0031|SYNTHETIC\lRETURN\l|lreturn truel}"];
Node_6 [shape=record,label="{6\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|RETURN\lORIG_RETURN\l|lreturn falsel}"];
MethodNode[shape=record,label="{private boolean main.Map.isAuto_canMove((r9v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]), (r10v0 '_npc' dm.Npc A[D('_npc' dm.Npc), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'sx' int A[D('sx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'sy' int A[D('sy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:5:0x0031 \-\> B:9:0x0030, CROSS_EDGE: B:2:0x000d \-\> B:7:0x002f\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_7 -> Node_6;
}

