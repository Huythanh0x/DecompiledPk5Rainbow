digraph "CFG formain.Map.runEvent_brow(I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lint r0 = r7.event[r8][r7.event_now[r8] + 2] \- 1l}"];
Node_2 [shape=record,label="{2\:\ 0x0012|lif (r0 != (\-1)) goto L27l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|lmain.Map.cur_npc = r7.myl}"];
Node_4 [shape=record,label="{4\:\ 0x0018|l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|lif (r7.event[r8][r7.event_now[r8] + 4] != 0) goto L28l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|ldm.Npc r1 = main.Map.cur_npclr1.brow_type = r7.event[r8][r7.event_now[r8] + 3]lmain.Map.cur_npc.brow_action = 0lmain.Map.cur_npc.brow_time = 0l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|lshort[] r1 = r7.event_nowlr1[r8] = (short) (r1[r8] + 5)lnextEvent(4112)l}"];
Node_8 [shape=record,label="{8\:\ 0x004c|RETURN\l|lreturnl}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_10 [shape=record,label="{10\:\ 0x005e|l}"];
Node_11 [shape=record,label="{11\:\ 0x006a|lif (r7.event[r8][r7.event_now[r8] + 4] != 1) goto L31l}"];
Node_12 [shape=record,label="{12\:\ 0x006c|lmain.Map.cur_npc.other[6] = r7.event[r8][r7.event_now[r8] + 3]l}"];
Node_13 [shape=record,label="{13\:\ 0x007f|l}"];
Node_14 [shape=record,label="{14\:\ 0x008c|lif (r7.event[r8][r7.event_now[r8] + 4] != 2) goto L25l}"];
Node_15 [shape=record,label="{15\:\ 0x008e|lmain.Map.cur_npc.brow_type = \-1lmain.Map.cur_npc.other[6] = 0l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|lmain.Map.cur_npc = r7.npc[getNpcLayer(r0)][getNpcId(r0)]l}"];
MethodNode[shape=record,label="{private void main.Map.runEvent_brow((r7v0 'this' main.Map A[IMMUTABLE_TYPE, THIS]), (r8v0 'i' int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:12:0x006c \-\> B:7:0x003e, CROSS_EDGE: B:14:0x008c \-\> B:7:0x003e, CROSS_EDGE: B:15:0x008e \-\> B:7:0x003e, CROSS_EDGE: B:16:0x004d \-\> B:4:0x0018\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_16;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_7;
Node_13 -> Node_14;
Node_14 -> Node_7;
Node_14 -> Node_15[style=dashed];
Node_15 -> Node_7;
Node_16 -> Node_4;
}

