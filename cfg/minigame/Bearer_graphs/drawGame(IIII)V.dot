digraph "CFG forminigame.Bearer.drawGame(IIII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|ldm.Ui.i().fillRect(5423359, r12, r13, r14, r15)ldm.Ui.i().drawFrameOne(r11.bsp, 0, r12 + (r14 \>\> 1), r13 + (r15 \>\> 1), 0)ldm.Ui.i().drawString(new java.lang.StringBuilder(main.Constants_H.GAME_TXT_15).append(r11.count).toString(), ((r14 \>\> 1) + r12) \- 25, r13, 24, 3, 1)ldm.Ui.i().drawString(new java.lang.StringBuilder(main.Constants_H.GAME_TXT_16).append(r11.ballC0).toString(), ((r14 \>\> 1) + r12) + 25, r13, 20, 3, 1)ldm.Ui.i().drawImage(r11.img, r12 + r14, r15 \- 15, 40)lr7 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x007a|LOOP_START\lPHI: r7l  0x007a: PHI (r7v1 'i' byte) = (r7v0 'i' byte), (r7v5 'i' byte) binds: [B:1:0x0000, B:8:0x0097] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x007a\-\>B:8:0x0097\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x007d|lif (r7 \< r11.xy.length) goto L35l}"];
Node_4 [shape=record,label="{4\:\ 0x008d|l}"];
Node_5 [shape=record,label="{5\:\ 0x0095|lif (r11.xy[r7][5] != (\-1)) goto L38l}"];
Node_6 [shape=record,label="{6\:\ 0x009b|lr11.gr.drawItem(r11.gDate[0][r11.xy[r7][6] \<\< 1], r11.xy[r7][0] + r12, r11.xy[r7][1] + r13, 0)l}"];
Node_7 [shape=record,label="{7\:\ 0x0097|SYNTHETIC\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x0097|LOOP_END\lLOOP:0: B:2:0x007a\-\>B:8:0x0097\l|lbyte r7 = (byte) (r7 + 1)l}"];
Node_9 [shape=record,label="{9\:\ 0x0097|SYNTHETIC\l|l}"];
Node_10 [shape=record,label="{10\:\ 0x007f|SYNTHETIC\l|l}"];
Node_11 [shape=record,label="{11\:\ 0x007f|lr7 = 0l}"];
Node_12 [shape=record,label="{12\:\ 0x0080|LOOP_START\lPHI: r7l  0x0080: PHI (r7v3 'i' byte) = (r7v2 'i' byte), (r7v4 'i' byte) binds: [B:11:0x007f, B:18:0x00cd] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:12:0x0080\-\>B:18:0x00cd\l|l}"];
Node_13 [shape=record,label="{13\:\ 0x0081|lif (r7 \< 2) goto L39l}"];
Node_14 [shape=record,label="{14\:\ 0x00be|ldm.Ui r0 = dm.Ui.i()lr1 = r11.sp[0]l}"];
Node_15 [shape=record,label="{15\:\ 0x00ca|lif (r11.myxy[4] != 0) goto L43l}"];
Node_16 [shape=record,label="{16\:\ 0x00cc|lr2 = 3l}"];
Node_17 [shape=record,label="{17\:\ 0x00cd|SYNTHETIC\l|l}"];
Node_18 [shape=record,label="{18\:\ 0x00cd|LOOP_END\lPHI: r2l  0x00cd: PHI (r2v19 int) = (r2v18 int), (r2v20 int) binds: [B:20:0x00cd, B:17:0x00cd] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:12:0x0080\-\>B:18:0x00cd\l|lr0.drawFrameOne(r1, r2, ((r11.myxy[0] + r12) + (r7 * 30)) + 20, (r11.myxy[1] + r13) + 25, 0)lbyte r7 = (byte) (r7 + 1)l}"];
Node_19 [shape=record,label="{19\:\ 0x00e6|lr2 = 4l}"];
Node_20 [shape=record,label="{20\:\ 0x00cd|SYNTHETIC\l|l}"];
Node_21 [shape=record,label="{21\:\ 0x0083|SYNTHETIC\l|l}"];
Node_22 [shape=record,label="{22\:\ 0x0083|lr11.gr.drawMoney(main.Constants_H.WIDTH_H_, main.Constants_H.HEIGHT_, 3, false)l}"];
Node_23 [shape=record,label="{23\:\ 0x008c|RETURN\l|lreturnl}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{private void minigame.Bearer.drawGame((r11v0 'this' minigame.Bearer A[IMMUTABLE_TYPE, THIS]), (r12v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'w' int A[D('w' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'h' int A[D('h' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:18:0x00cd \-\> B:12:0x0080, CROSS_EDGE: B:19:0x00e6 \-\> B:18:0x00cd, BACK_EDGE: B:8:0x0097 \-\> B:2:0x007a, CROSS_EDGE: B:6:0x009b \-\> B:8:0x0097\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_2;
Node_9 -> Node_8;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_21[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_18;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
}

