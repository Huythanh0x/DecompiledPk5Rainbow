digraph "CFG forminigame.Bearer.key()Z" {
subgraph cluster_Region_423250340 {
label = "R(2:(1:(1:5)(1:(2:11|(1:15)(1:(2:18|19)))(1:(2:22|23))))(1:(1:(2:28|(1:30))(1:(2:33|(1:35)))))|7)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_920667942 {
label = "IF [B:2:0x0005] THEN: R(1:(1:5)(1:(2:11|(1:15)(1:(2:18|19)))(1:(2:22|23)))) ELSE: R(1:(1:(2:28|(1:30))(1:(2:33|(1:35)))))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0005|lif (r6.state == 0) goto L40l}"];
subgraph cluster_Region_1877690070 {
label = "R(1:(1:5)(1:(2:11|(1:15)(1:(2:18|19)))(1:(2:22|23))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1421920371 {
label = "IF [B:4:0x000f] THEN: R(1:5) ELSE: R(1:(2:11|(1:15)(1:(2:18|19)))(1:(2:22|23)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|lif (dm.Ms.i().key_Up_Down() != false) goto L42l}"];
subgraph cluster_Region_536661030 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0011|lr6.sel = (byte) (r6.sel ^ 1)l}"];
}
subgraph cluster_Region_730952072 {
label = "R(1:(2:11|(1:15)(1:(2:18|19)))(1:(2:22|23))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_511270874 {
label = "IF [B:10:0x0022] THEN: R(2:11|(1:15)(1:(2:18|19))) ELSE: R(1:(2:22|23)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0022|lif (dm.Ms.i().key_S1_Num5() != false) goto L47l}"];
subgraph cluster_Region_1277726518 {
label = "R(2:11|(1:15)(1:(2:18|19)))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0024|ldm.Ms.i().keyRelease()l}"];
subgraph cluster_IfRegion_902625129 {
label = "IF [B:12:0x002d, B:14:0x003b] THEN: R(1:15) ELSE: R(1:(2:18|19))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x002d|lif (r6.sel == 0) goto L49l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|ADDED_TO_REGION\l|lif (r6.gr.isMoney(r6.money[r6.lv], true) == true) goto L51l}"];
subgraph cluster_Region_359779689 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x003d|lgo(1)l}"];
}
subgraph cluster_Region_1092798354 {
label = "R(1:(2:18|19)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1241231807 {
label = "IF [B:17:0x0043] THEN: R(2:18|19) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0043|lif (r6.sel == 1) goto L54l}"];
subgraph cluster_Region_459173974 {
label = "R(2:18|19)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0045|ldm.Ms.i().keyRelease()lnullGame()l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|lreturn truel}"];
}
}
}
}
}
subgraph cluster_Region_14679249 {
label = "R(1:(2:22|23)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1461105935 {
label = "IF [B:21:0x0059] THEN: R(2:22|23) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0059|lif (dm.Ms.i().key_S2() != false) goto L57l}"];
subgraph cluster_Region_1140101147 {
label = "R(2:22|23)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x005b|lnullGame()l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|lreturn truel}"];
}
}
}
}
}
}
}
subgraph cluster_Region_725648627 {
label = "R(1:(1:(2:28|(1:30))(1:(2:33|(1:35))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1418120254 {
label = "IF [B:25:0x0062] THEN: R(1:(2:28|(1:30))(1:(2:33|(1:35)))) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0062|lif (r6.state == 1) goto L60l}"];
subgraph cluster_Region_911910252 {
label = "R(1:(2:28|(1:30))(1:(2:33|(1:35))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1372164084 {
label = "IF [B:27:0x006c] THEN: R(2:28|(1:30)) ELSE: R(1:(2:33|(1:35)))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x006c|lif (dm.Ms.i().key_Left() != false) goto L62l}"];
subgraph cluster_Region_1428043542 {
label = "R(2:28|(1:30))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x006e|lshort[] short[] r0 = r6.myxylr0[0] = (short) (r0[0] \- 10)l}"];
subgraph cluster_IfRegion_2122448418 {
label = "IF [B:29:0x007c] THEN: R(1:30) ELSE: null";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x007c|lif (r6.myxy[0] \< 0) goto L64l}"];
subgraph cluster_Region_478423792 {
label = "R(1:30)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x007e|lr6.myxy[0] = 0l}"];
}
}
}
subgraph cluster_Region_2140573129 {
label = "R(1:(2:33|(1:35))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1648167904 {
label = "IF [B:32:0x008b] THEN: R(2:33|(1:35)) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x008b|lif (dm.Ms.i().key_Right() != false) goto L67l}"];
subgraph cluster_Region_2003103441 {
label = "R(2:33|(1:35))";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x008d|lshort[] short[] r0 = r6.myxylr0[0] = (short) (r0[0] + 10)l}"];
subgraph cluster_IfRegion_322734443 {
label = "IF [B:34:0x00a1] THEN: R(1:35) ELSE: null";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x00a1|lif ((r6.myxy[0] + r6.myxy[2]) \> 220) goto L69l}"];
subgraph cluster_Region_777183830 {
label = "R(1:35)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x00a3|lr6.myxy[0] = (short) ((240 \- r6.myxy[2]) \- 20)l}"];
}
}
}
}
}
}
}
}
}
}
Node_7 [shape=record,label="{7\:\ 0x0019|RETURN\lORIG_RETURN\l|lreturn falsel}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,color=red,label="{1\:\ 0x0000|l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007|l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0018|l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001a|l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x002f|l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0041|l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0051|l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0060|l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0064|l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0083|l}"];
MethodNode[shape=record,label="{public boolean minigame.Bearer.key((r6v0 'this' minigame.Bearer A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [minigame.MiniGame_H.key():boolean]\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:15:0x003d \-\> B:6:0x0018, CROSS_EDGE: B:17:0x0043 \-\> B:6:0x0018, CROSS_EDGE: B:18:0x0045 \-\> B:7:0x0019, CROSS_EDGE: B:12:0x002d \-\> B:16:0x0041, CROSS_EDGE: B:21:0x0059 \-\> B:6:0x0018, CROSS_EDGE: B:22:0x005b \-\> B:7:0x0019, CROSS_EDGE: B:25:0x0062 \-\> B:6:0x0018, CROSS_EDGE: B:29:0x007c \-\> B:6:0x0018, CROSS_EDGE: B:30:0x007e \-\> B:6:0x0018, CROSS_EDGE: B:32:0x008b \-\> B:6:0x0018, CROSS_EDGE: B:34:0x00a1 \-\> B:6:0x0018, CROSS_EDGE: B:35:0x00a3 \-\> B:6:0x0018\l}"];
MethodNode -> Node_0;
Node_2 -> Node_3;
Node_2 -> Node_24[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_9[style=dashed];
Node_5 -> Node_6;
Node_10 -> Node_11;
Node_10 -> Node_20[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_14 -> Node_16[style=dashed];
Node_15 -> Node_6;
Node_17 -> Node_6[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_8;
Node_21 -> Node_6[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_8;
Node_25 -> Node_6[style=dashed];
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_27 -> Node_31[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_6[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_6;
Node_32 -> Node_6[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_6[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_6;
Node_7 -> Node_8;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_6 -> Node_7;
Node_9 -> Node_10;
Node_13 -> Node_14;
Node_16 -> Node_17;
Node_20 -> Node_21;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_31 -> Node_32;
}

