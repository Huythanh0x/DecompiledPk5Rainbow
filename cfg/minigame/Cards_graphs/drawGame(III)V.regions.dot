digraph "CFG forminigame.Cards.drawGame(III)V" {
subgraph cluster_Region_2125073644 {
label = "R(4:1|(3:4|(3:10|(1:14)|16)|21)|23|(1:25)(2:28|31))";
node [shape=record,color=blue];
Node_1 [shape=record,label="{1\:\ 0x0000|lint r1 = 0l}"];
subgraph cluster_LoopRegion_1704190214 {
label = "LOOP:0: (3:4|(3:10|(1:14)|16)|21)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|ADDED_TO_REGION\l|lif (r1 \< r12.findN.length) goto L9l}"];
subgraph cluster_Region_1789881226 {
label = "R(3:4|(3:10|(1:14)|16)|21)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x005b|lint r2 = 0l}"];
subgraph cluster_LoopRegion_1789259838 {
label = "LOOP:1: (3:10|(1:14)|16)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0061|ADDED_TO_REGION\l|lif (r2 \< r12.findN[r1].length) goto L13l}"];
subgraph cluster_Region_1153850602 {
label = "R(3:10|(1:14)|16)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0089|PHI: r5l  0x0089: PHI (r5v8 byte) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|ldrawCard(r1, r2, ((r12.gw + r12.gspace) * r2) + r12.wh + r12.gx, ((r12.gh + r12.gspace) * r1) + r12.hh + r12.gy, r12.findC[r1][r2] == 3 ? (byte) 1 : r12.findC[r1][r2])l}"];
subgraph cluster_IfRegion_1042747045 {
label = "IF [B:11:0x00b7, B:13:0x00bc] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x00b7|lif (r12.gr.pkey.isSelect(r12.wh + r12.gx + ((r12.gw + r12.gspace) * r2), r12.hh + r12.gy + ((r12.gh + r12.gspace) * r1), r12.gw + r12.gspace, r12.gh + r12.gspace) != false) goto L18l}"];
Node_13 [shape=record,label="{13\:\ 0x00bc|ADDED_TO_REGION\l|lif (r12.state \< 3) goto L20l}"];
subgraph cluster_Region_801493456 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x00be|lr12.tx = (byte) r2lr12.ty = (byte) r1lr12.gr.pkey.setKey5()l}"];
}
}
Node_16 [shape=record,label="{16\:\ 0x00cb|LOOP_END\lLOOP:1: B:5:0x005c\-\>B:16:0x00cb\l|lr2++l}"];
}
}
Node_21 [shape=record,label="{21\:\ 0x0063|LOOP_END\lLOOP:0: B:2:0x0005\-\>B:21:0x0063\l|lr1++l}"];
}
}
Node_23 [shape=record,label="{23\:\ 0x000a|ldm.Ui dm.Ui r3 = dm.Ui.i()lshort int r0 = r12.whlshort int r1 = r12.gxlr3.drawRectZ(15400191, r0 + r1 + (r12.tx * (r12.gw + r12.gspace)), r12.hh + r12.gy + (r12.ty * (r12.gh + r12.gspace)), r12.gw, r12.gh, 3)l}"];
subgraph cluster_IfRegion_432461190 {
label = "IF [B:24:0x0039] THEN: R(1:25) ELSE: R(2:28|31)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0039|lif (r12.count \> 0) goto L7l}"];
subgraph cluster_Region_889262970 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x003b|ldm.Ui.i().drawNum(new java.lang.StringBuilder().append(r12.count \/ 10).toString(), main.Constants_H.WIDTH_H_ + 10, 29, 36, 2)l}"];
}
subgraph cluster_Region_286920480 {
label = "R(2:28|31)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x00d6|ldm.Ui.i().drawString(main.Constants_H.GAME_TXT_17, main.Constants_H.WIDTH_H_, 4, 17, 3, 0)l}"];
Node_31 [shape=record,label="{31\:\ 0x00f3|PHI: r1l  0x00f3: PHI (r1v12 int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|lr12.gr.showStringM(main.Constants_H.GAME_TXT_18 + (r12.time \< 0 ? 0 : r12.time \- 1) + \"æ¬¡\", main.Constants_H.WIDTH_H_ + javax.microedition.media.Player.REALIZED, main.Constants_H.HEIGHT_H_ \- 75, 5, 0)l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0005|LOOP_START\lPHI: r1l  0x0005: PHI (r1v1 'i' int) = (r1v0 'i' int), (r1v17 'i' int) binds: [B:1:0x0000, B:21:0x0063] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0005\-\>B:21:0x0063\l|l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x005c|LOOP_START\lPHI: r2l  0x005c: PHI (r2v6 'j' int) = (r2v5 'j' int), (r2v7 'j' int) binds: [B:4:0x005b, B:16:0x00cb] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:5:0x005c\-\>B:16:0x00cb\l|l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0066|l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0085|l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0087|l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x00b9|l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x00cb|SYNTHETIC\l|l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x00cb|SYNTHETIC\lADDED_TO_REGION\l|l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x00cb|SYNTHETIC\lADDED_TO_REGION\l|l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x00ce|l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0063|SYNTHETIC\l|l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x000a|SYNTHETIC\l|l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x005a|ORIG_RETURN\l|l}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x00f0|l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x00f2|l}"];
Node_32 [shape=record,color=red,label="{32\:\ ?|SYNTHETIC\l|l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x010e|l}"];
MethodNode[shape=record,label="{private void minigame.Cards.drawGame((r12v0 'this' minigame.Cards A[IMMUTABLE_TYPE, THIS]), (r13v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'h' int A[D('h' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{l DEBUG: l \-\> TODO: convert one arg to string using `String.valueOf()`, args: (wrap:int:ARITH)\}\lCROSS_EDGE: B:31:0x00f3 \-\> B:26:0x005a, CROSS_EDGE: B:33:0x010e \-\> B:31:0x00f3, BACK_EDGE: B:21:0x0063 \-\> B:2:0x0005, BACK_EDGE: B:16:0x00cb \-\> B:5:0x005c, CROSS_EDGE: B:13:0x00bc \-\> B:16:0x00cb, CROSS_EDGE: B:11:0x00b7 \-\> B:16:0x00cb, CROSS_EDGE: B:19:0x00ce \-\> B:10:0x0089\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;
Node_1 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_22[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_20[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_18[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_17[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_5;
Node_21 -> Node_2;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_28[style=dashed];
Node_25 -> Node_26;
Node_28 -> Node_29;
Node_31 -> Node_32;
Node_0 -> Node_1;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_15 -> Node_16;
Node_17 -> Node_16;
Node_18 -> Node_16;
Node_19 -> Node_10;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_26 -> Node_27;
Node_29 -> Node_30;
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_32 -> Node_27;
Node_33 -> Node_31;
}

