digraph "CFG forminigame.Racing.drawCloud()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|lr0 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x0003|LOOP_START\lPHI: r0l  0x0003: PHI (r0v1 'i' byte) = (r0v0 'i' byte), (r0v5 'i' byte) binds: [B:1:0x0000, B:4:0x000f] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x0003\-\>B:4:0x000f\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|lif (r0 \< r8.cloud.length) goto L28l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|LOOP_END\lLOOP:0: B:2:0x0003\-\>B:4:0x000f\l|ldm.Ui.i().drawImage(r8.imgCloud, r8.cloud[r0][0], r8.cloud[r0][1] \- r8.srcY, 0)lbyte r0 = (byte) (r0 + 1)l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|SYNTHETIC\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|lr0 = 0l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|LOOP_START\lPHI: r0l  0x0009: PHI (r0v3 'i' byte) = (r0v2 'i' byte), (r0v4 'i' byte) binds: [B:6:0x0008, B:13:0x0040] A[DONT_GENERATE, DONT_INLINE]\lLOOP:1: B:7:0x0009\-\>B:13:0x0040\l|l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|lif (r0 \< r8.cloud.length) goto L29l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|lif (isNpcSrc(r8.cloud[r0][0], r8.cloud[r0][1]) == false) goto L33l}"];
Node_11 [shape=record,label="{11\:\ 0x003d|laddCloud(r0)l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|SYNTHETIC\l|l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|LOOP_END\lLOOP:1: B:7:0x0009\-\>B:13:0x0040\l|lbyte r0 = (byte) (r0 + 1)l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|lshort[] r1 = r8.cloud[r0]lr1[0] = (short) (r1[0] \- r8.cloud[r0][2])l}"];
Node_15 [shape=record,label="{15\:\ 0x0040|SYNTHETIC\l|l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|SYNTHETIC\l|l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|RETURN\l|lreturnl}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l|l}"];
MethodNode[shape=record,label="{private void minigame.Racing.drawCloud((r8v0 'this' minigame.Racing A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lBACK_EDGE: B:13:0x0040 \-\> B:7:0x0009, CROSS_EDGE: B:14:0x0044 \-\> B:13:0x0040, BACK_EDGE: B:4:0x000f \-\> B:2:0x0003\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_16[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_7;
Node_14 -> Node_15;
Node_15 -> Node_13;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

