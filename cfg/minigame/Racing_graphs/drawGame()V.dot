digraph "CFG forminigame.Racing.drawGame()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l|l}"];
Node_1 [shape=record,label="{1\:\ 0x0000|ldm.Ui.i().fillRect(5423359, 0, 0, main.Constants_H.WIDTH_, main.Constants_H.HEIGHT_)ldrawCloud()ldrawEnd()lr18 = 0l}"];
Node_2 [shape=record,label="{2\:\ 0x001c|LOOP_START\lPHI: r18l  0x001c: PHI (r18v1 'i' byte) = (r18v0 'i' byte), (r18v2 'i' byte) binds: [B:1:0x0000, B:4:0x0058] A[DONT_GENERATE, DONT_INLINE]\lLOOP:0: B:2:0x001c\-\>B:4:0x0058\l|l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|lif (r18 \< r19.length) goto L26l}"];
Node_4 [shape=record,label="{4\:\ 0x0058|LOOP_END\lLOOP:0: B:2:0x001c\-\>B:4:0x0058\l|ldm.Ui.i().drawNum(new java.lang.StringBuilder().append(r18 + 1).toString(), ((r18 * 100) + 125) + 22, 20 \- r19.srcY, 1, 2)ldm.Ui.i().drawActionOne(r19.sp[0], 1, ((r18 * 100) + 125) + 22, r19.monY[r18] \- r19.srcY, r19.now_a[r18], 0, true)lr18 = (byte) (r18 + 1)l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|SYNTHETIC\l|l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|lif (r19.state != 3) goto L28l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|lif (r19.time == 0) goto L29l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|ldm.Ui.i().drawNum(new java.lang.StringBuilder().append(r19.time \/ 20).toString(), main.Constants_H.WIDTH_H_ \- 5, main.Constants_H.HEIGHT_H_, 0, 2)l}"];
Node_11 [shape=record,label="{11\:\ 0x0057|RETURN\lORIG_RETURN\l|lreturnl}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l|l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|lreturnl}"];
MethodNode[shape=record,label="{private void minigame.Racing.drawGame((r19v0 'this' minigame.Racing A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:9:0x0033 \-\> B:11:0x0057, CROSS_EDGE: B:7:0x002c \-\> B:11:0x0057, BACK_EDGE: B:4:0x0058 \-\> B:2:0x001c\l}"];
MethodNode -> Node_0;
Node_0 -> Node_1;
Node_1 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_2;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_12;
Node_14 -> Node_12;
}

